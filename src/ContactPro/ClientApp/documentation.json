{
    "pipes": [
        {
            "name": "DurationPipe",
            "id": "pipe-DurationPipe-67f7efcd374940cba65fbf3f36dfc4b9f64e54e388143ce6103c71a6145a1cc2233043c13e31b9f4b7d49f7c19ac78b45afbd077b9673619fe1a28acd0f8f48e",
            "file": "src/app/shared/date/duration.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "duration",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport dayjs from \"dayjs/esm\";\n\n@Pipe({\n  name: \"duration\",\n})\nexport class DurationPipe implements PipeTransform {\n  transform(value: any): string {\n    if (value) {\n      return dayjs.duration(value).humanize();\n    }\n    return \"\";\n  }\n}\n"
        },
        {
            "name": "FormatMediumDatePipe",
            "id": "pipe-FormatMediumDatePipe-85daaeeab8df01f8b9d924faa938da456db9568524ed48c1a22239ce69d659f280347ccbb99c9fa0f4a7fff2acd49b54b0cdd318c13996a90d786f163e8c3748",
            "file": "src/app/shared/date/format-medium-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "day",
                            "type": "dayjs.Dayjs | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "dayjs.Dayjs | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatMediumDate",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport dayjs from \"dayjs/esm\";\n\n@Pipe({\n  name: \"formatMediumDate\",\n})\nexport class FormatMediumDatePipe implements PipeTransform {\n  transform(day: dayjs.Dayjs | null | undefined): string {\n    return day ? day.format(\"D MMM YYYY\") : \"\";\n  }\n}\n"
        },
        {
            "name": "FormatMediumDatetimePipe",
            "id": "pipe-FormatMediumDatetimePipe-3551610be8c99548957b8d656892901fb2b8ce8f6e87fd7eeb29a5350052b4bde4fbc04eb2538cdba7aef1311b0a2ef6332e5b19d1a8057d613907e766c691dc",
            "file": "src/app/shared/date/format-medium-datetime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "day",
                            "type": "dayjs.Dayjs | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "dayjs.Dayjs | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatMediumDatetime",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport dayjs from \"dayjs/esm\";\n\n@Pipe({\n  name: \"formatMediumDatetime\",\n})\nexport class FormatMediumDatetimePipe implements PipeTransform {\n  transform(day: dayjs.Dayjs | null | undefined): string {\n    return day ? day.format(\"D MMM YYYY HH:mm:ss\") : \"\";\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Alert",
            "id": "interface-Alert-e7e8a5b80e71cca8fb64963ef007bdd186a194ec082d03fb217940e6380aaa413f80cbbe838a45f43ab17082dd6c3545208e080883e188dc0ecb3bbb68bb8c8a",
            "file": "src/app/core/util/alert.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, SecurityContext, NgZone } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\nexport type AlertType = \"success\" | \"danger\" | \"warning\" | \"info\";\n\nexport interface Alert {\n  id?: number;\n  type: AlertType;\n  message?: string;\n  timeout?: number;\n  toast?: boolean;\n  position?: string;\n  close?: (alerts: Alert[]) => void;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AlertService {\n  timeout = 5000;\n  toast = false;\n  position = \"top right\";\n\n  // unique id for each alert. Starts from 0.\n  private alertId = 0;\n  private alerts: Alert[] = [];\n\n  constructor(private sanitizer: DomSanitizer, private ngZone: NgZone) {}\n\n  clear(): void {\n    this.alerts = [];\n  }\n\n  get(): Alert[] {\n    return this.alerts;\n  }\n\n  /**\n   * Adds alert to alerts array and returns added alert.\n   * @param alert      Alert to add. If `timeout`, `toast` or `position` is missing then applying default value.\n   * @param extAlerts  If missing then adding `alert` to `AlertService` internal array and alerts can be retrieved by `get()`.\n   *                   Else adding `alert` to `extAlerts`.\n   * @returns  Added alert\n   */\n  addAlert(alert: Alert, extAlerts?: Alert[]): Alert {\n    alert.id = this.alertId++;\n\n    alert.message =\n      this.sanitizer.sanitize(SecurityContext.HTML, alert.message ?? \"\") ?? \"\";\n    alert.timeout = alert.timeout ?? this.timeout;\n    alert.toast = alert.toast ?? this.toast;\n    alert.position = alert.position ?? this.position;\n    alert.close = (alertsArray: Alert[]) =>\n      this.closeAlert(alert.id!, alertsArray);\n\n    (extAlerts ?? this.alerts).push(alert);\n\n    if (alert.timeout > 0) {\n      // Workaround protractor waiting for setTimeout.\n      // Reference https://www.protractortest.org/#/timeouts\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.ngZone.run(() => {\n            this.closeAlert(alert.id!, extAlerts ?? this.alerts);\n          });\n        }, alert.timeout);\n      });\n    }\n\n    return alert;\n  }\n\n  private closeAlert(alertId: number, extAlerts?: Alert[]): void {\n    const alerts = extAlerts ?? this.alerts;\n    const alertIndex = alerts.map((alert) => alert.id).indexOf(alertId);\n    // if found alert then remove\n    if (alertIndex >= 0) {\n      alerts.splice(alertIndex, 1);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "toast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileLoadError",
            "id": "interface-FileLoadError-4b4b369ea30e06e5396fa6a7e155d774bbc050f8540bf6bb9d733e8e11695a25516d12302c93c0c8bb619fc380503b21b11afa4bb54fd172b918b5bcd884ab67",
            "file": "src/app/core/util/data-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { Observable, Observer } from \"rxjs\";\n\nexport type FileLoadErrorType = \"not.image\" | \"could.not.extract\";\n\nexport interface FileLoadError {\n  message: string;\n  key: FileLoadErrorType;\n  params?: any;\n}\n\n/**\n * An utility service for data.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataUtils {\n  /**\n   * Method to find the byte size of the string provides\n   */\n  byteSize(base64String: string): string {\n    return this.formatAsBytes(this.size(base64String));\n  }\n\n  /**\n   * Method to open file\n   */\n  openFile(data: string, contentType: string | null | undefined): void {\n    contentType = contentType ?? \"\";\n\n    const byteCharacters = atob(data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {\n      type: contentType,\n    });\n    const fileURL = window.URL.createObjectURL(blob);\n    const win = window.open(fileURL);\n    win!.onload = function () {\n      URL.revokeObjectURL(fileURL);\n    };\n  }\n\n  /**\n   * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\n   * and returns an observable.\n   *\n   * @param event the object containing the file (at event.target.files[0])\n   * @param editForm the form group where the input field is located\n   * @param field the field name to set the file's 'base 64 data' on\n   * @param isImage boolean representing if the file represented by the event is an image\n   * @returns an observable that loads file to form field and completes if sussessful\n   *      or returns error as FileLoadError on failure\n   */\n  loadFileToForm(\n    event: Event,\n    editForm: FormGroup,\n    field: string,\n    isImage: boolean\n  ): Observable<void> {\n    return new Observable((observer: Observer<void>) => {\n      const eventTarget: HTMLInputElement | null =\n        event.target as HTMLInputElement | null;\n      if (eventTarget?.files?.[0]) {\n        const file: File = eventTarget.files[0];\n        if (isImage && !file.type.startsWith(\"image/\")) {\n          const error: FileLoadError = {\n            message: `File was expected to be an image but was found to be '${file.type}'`,\n            key: \"not.image\",\n            params: { fileType: file.type },\n          };\n          observer.error(error);\n        } else {\n          const fieldContentType: string = field + \"ContentType\";\n          this.toBase64(file, (base64Data: string) => {\n            editForm.patchValue({\n              [field]: base64Data,\n              [fieldContentType]: file.type,\n            });\n            observer.next();\n            observer.complete();\n          });\n        }\n      } else {\n        const error: FileLoadError = {\n          message: \"Could not extract file\",\n          key: \"could.not.extract\",\n          params: { event },\n        };\n        observer.error(error);\n      }\n    });\n  }\n\n  /**\n   * Method to convert the file to base64\n   */\n  private toBase64(file: File, callback: (base64Data: string) => void): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.onload = (e: ProgressEvent<FileReader>) => {\n      if (typeof e.target?.result === \"string\") {\n        const base64Data: string = e.target.result.substring(\n          e.target.result.indexOf(\"base64,\") + \"base64,\".length\n        );\n        callback(base64Data);\n      }\n    };\n    fileReader.readAsDataURL(file);\n  }\n\n  private endsWith(suffix: string, str: string): boolean {\n    return str.includes(suffix, str.length - suffix.length);\n  }\n\n  private paddingSize(value: string): number {\n    if (this.endsWith(\"==\", value)) {\n      return 2;\n    }\n    if (this.endsWith(\"=\", value)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  private size(value: string): number {\n    return (value.length / 4) * 3 - this.paddingSize(value);\n  }\n\n  private formatAsBytes(size: number): string {\n    return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") + \" bytes\";\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileLoadErrorType",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICategory",
            "id": "interface-ICategory-02347d67da71812c8594a49daf847681d1214f11b535da72f68a55d7ed774dcbc3339659806cffd5a7659af85afc55dba3ac38c57b018a680ee732e2b74d20d8",
            "file": "src/app/entities/category/category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import dayjs from \"dayjs/esm\";\nimport { IContact } from \"app/entities/contact/contact.model\";\nimport { IUser } from \"app/entities/user/user.model\";\n\nexport interface ICategory {\n  id?: number;\n  name?: string;\n  created?: dayjs.Dayjs | null;\n  contacts?: IContact[] | null;\n  user?: IUser | null;\n}\n\nexport class Category implements ICategory {\n  constructor(\n    public id?: number,\n    public name?: string,\n    public created?: dayjs.Dayjs | null,\n    public contacts?: IContact[] | null,\n    public user?: IUser | null\n  ) {}\n}\n\nexport function getCategoryIdentifier(category: ICategory): number | undefined {\n  return category.id;\n}\n",
            "properties": [
                {
                    "name": "contacts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact[] | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IContact",
            "id": "interface-IContact-a6c772fd676dc1d05bc5d7765c435ed2767b87b96f9c6913ff5d67422788b5a01d545d9a325cf4f9bc4974bfe39a055108685ba18bdeb5a17ae69c68662c4821",
            "file": "src/app/entities/contact/contact.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import dayjs from \"dayjs/esm\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { ICategory } from \"app/entities/category/category.model\";\nimport { States } from \"app/entities/enumerations/states.model\";\n\nexport interface IContact {\n  id?: number;\n  firstName?: string;\n  lastName?: string;\n  address1?: string;\n  address2?: string | null;\n  city?: string;\n  state?: States;\n  zipCode?: string;\n  email?: string;\n  phoneNumber?: string;\n  birthDate?: dayjs.Dayjs | null;\n  created?: dayjs.Dayjs | null;\n  imageDataContentType?: string | null;\n  imageData?: string | null;\n  imageType?: string | null;\n  user?: IUser | null;\n  categories?: ICategory[] | null;\n}\n\nexport class Contact implements IContact {\n  constructor(\n    public id?: number,\n    public firstName?: string,\n    public lastName?: string,\n    public address1?: string,\n    public address2?: string | null,\n    public city?: string,\n    public state?: States,\n    public zipCode?: string,\n    public email?: string,\n    public phoneNumber?: string,\n    public birthDate?: dayjs.Dayjs | null,\n    public created?: dayjs.Dayjs | null,\n    public imageDataContentType?: string | null,\n    public imageData?: string | null,\n    public imageType?: string | null,\n    public user?: IUser | null,\n    public categories?: ICategory[] | null\n  ) {}\n}\n\nexport function getContactIdentifier(contact: IContact): number | undefined {\n  return contact.id;\n}\n",
            "properties": [
                {
                    "name": "address1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "address2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICategory[] | null",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "imageDataContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "phoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "States",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser | null",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "zipCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InfoResponse",
            "id": "interface-InfoResponse-2b33c6ff07399c8c2e3518408e00dfe82ae26430139d7aedd16ae6e390c4a59a0d815d0ce725d902eac675a609b30380d7a917da4194f57c6ca65262e9e780cd",
            "file": "src/app/layouts/profiles/profile-info.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InfoResponse {\n  \"display-ribbon-on-profiles\"?: string;\n  git?: any;\n  build?: any;\n  activeProfiles?: string[];\n}\n\nexport class ProfileInfo {\n  constructor(\n    public activeProfiles?: string[],\n    public ribbonEnv?: string,\n    public inProduction?: boolean,\n    public openAPIEnabled?: boolean\n  ) {}\n}\n",
            "properties": [
                {
                    "name": "activeProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "build",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "display-ribbon-on-profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "git",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-e3a8047d1a021a2e7c2988a6f960789f4dfe552847bfc4ef3fba3ee678870cebf802effc8239b5b63e8b99c4f97861187ca99891d8d3b622cf552c1498ab8b15",
            "file": "src/app/admin/user-management/user-management.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUser {\n  id?: string;\n  login?: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  email?: string;\n  activated?: boolean;\n  langKey?: string;\n  authorities?: string[];\n  createdBy?: string;\n  createdDate?: Date;\n  lastModifiedBy?: string;\n  lastModifiedDate?: Date;\n}\n\nexport class User implements IUser {\n  constructor(\n    public id?: string,\n    public login?: string,\n    public firstName?: string | null,\n    public lastName?: string | null,\n    public email?: string,\n    public activated?: boolean,\n    public langKey?: string,\n    public authorities?: string[],\n    public createdBy?: string,\n    public createdDate?: Date,\n    public lastModifiedBy?: string,\n    public lastModifiedDate?: Date\n  ) {}\n}\n",
            "properties": [
                {
                    "name": "activated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "authorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "langKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lastModifiedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-e248d642a88befe0af5944ab38d58046881e3239ae58cd9dc86d97465835842e95aa2d7f795b74ad8262ecb65609518c298090b15e74b31bc30564f49510fc66-1",
            "file": "src/app/entities/user/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUser {\n  id?: string;\n  login?: string;\n}\n\nexport class User implements IUser {\n  constructor(public id: string, public login: string) {}\n}\n\nexport function getUserIdentifier(user: IUser): string | undefined {\n  return user.id;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IUser-1"
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-f0df1eaf9286f8379240970402d19edc885a071e3c28d88d180224d6f61d3927c61e12abd1dc48c177be8a7be632491be4c495c09a5701c79af28c56be94ad05",
            "file": "src/app/core/request/request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\n  page: number;\n  size: number;\n  sort: string[];\n}\n\nexport interface Search {\n  query: string;\n}\n\nexport interface SearchWithPagination extends Search, Pagination {}\n",
            "properties": [
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Search",
            "id": "interface-Search-f0df1eaf9286f8379240970402d19edc885a071e3c28d88d180224d6f61d3927c61e12abd1dc48c177be8a7be632491be4c495c09a5701c79af28c56be94ad05",
            "file": "src/app/core/request/request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\n  page: number;\n  size: number;\n  sort: string[];\n}\n\nexport interface Search {\n  query: string;\n}\n\nexport interface SearchWithPagination extends Search, Pagination {}\n",
            "properties": [
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SearchWithPagination",
            "id": "interface-SearchWithPagination-f0df1eaf9286f8379240970402d19edc885a071e3c28d88d180224d6f61d3927c61e12abd1dc48c177be8a7be632491be4c495c09a5701c79af28c56be94ad05",
            "file": "src/app/core/request/request.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\n  page: number;\n  size: number;\n  sort: string[];\n}\n\nexport interface Search {\n  query: string;\n}\n\nexport interface SearchWithPagination extends Search, Pagination {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Search"
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-f5cd94295cd1ba00dd89455ee5f71a2e826ff527f85bed155f8099c3b5cf4ba299007c0b28fed901d51a752cff72f7cbda4b596f3bae42685035f30ed56e08cc",
            "file": "src/app/core/auth/account.service.ts",
            "properties": [
                {
                    "name": "accountCache$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Account> | null",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "authenticationState",
                    "defaultValue": "new ReplaySubject<Account | null>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "userIdentity",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authenticate",
                    "args": [
                        {
                            "name": "identity",
                            "type": "Account | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "identity",
                            "type": "Account | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Account>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAuthenticationState",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Account | null>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasAnyAuthority",
                    "args": [
                        {
                            "name": "authorities",
                            "type": "string[] | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authorities",
                            "type": "string[] | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "identity",
                    "args": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Account | null>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToStoredUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "Account",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, ReplaySubject, of } from \"rxjs\";\nimport { shareReplay, tap, catchError } from \"rxjs/operators\";\n\nimport { StateStorageService } from \"app/core/auth/state-storage.service\";\nimport { ApplicationConfigService } from \"../config/application-config.service\";\nimport { Account } from \"app/core/auth/account.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account> | null;\n\n  constructor(\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(account: Account): Observable<{}> {\n    return this.http.post(\n      this.applicationConfigService.getEndpointFor(\"api/account\"),\n      account\n    );\n  }\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n    if (!identity) {\n      this.accountCache$ = null;\n    }\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some((authority: string) =>\n      authorities.includes(authority)\n    );\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$ || force) {\n      this.accountCache$ = this.fetch().pipe(\n        tap((account: Account) => {\n          this.authenticate(account);\n\n          this.navigateToStoredUrl();\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$.pipe(catchError(() => of(null)));\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(\n      this.applicationConfigService.getEndpointFor(\"api/account\")\n    );\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ActivateService",
            "id": "injectable-ActivateService-ad1fa7e6f8857b9e16ddcc4d2b4bf107dae3e16e831295305cad580cca30b5a0001e74eec016dc49e12a213b4b6db5e41e565ee853e4f5234902d06e58d41e00",
            "file": "src/app/account/activate/activate.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ActivateService {\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(\n      this.applicationConfigService.getEndpointFor(\"api/activate\"),\n      {\n        params: new HttpParams().set(\"key\", key),\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AlertService",
            "id": "injectable-AlertService-e7e8a5b80e71cca8fb64963ef007bdd186a194ec082d03fb217940e6380aaa413f80cbbe838a45f43ab17082dd6c3545208e080883e188dc0ecb3bbb68bb8c8a",
            "file": "src/app/core/util/alert.service.ts",
            "properties": [
                {
                    "name": "alertId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "position",
                    "defaultValue": "\"top right\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "timeout",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "toast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "addAlert",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "extAlerts",
                            "type": "Alert[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Alert",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds alert to alerts array and returns added alert.\n                  Else adding `alert` to `extAlerts`.\n",
                    "description": "<p>Adds alert to alerts array and returns added alert.\n                  Else adding <code>alert</code> to <code>extAlerts</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 849,
                                "end": 854,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "alert"
                            },
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 843,
                                "end": 848,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Alert to add. If <code>timeout</code>, <code>toast</code> or <code>position</code> is missing then applying default value.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 962,
                                "end": 971,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "extAlerts"
                            },
                            "type": "Alert[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 956,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>If missing then adding <code>alert</code> to <code>AlertService</code> internal array and alerts can be retrieved by <code>get()</code>.\nElse adding <code>alert</code> to <code>extAlerts</code>.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1142,
                                "end": 1149,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Added alert</p>\n"
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeAlert",
                    "args": [
                        {
                            "name": "alertId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "extAlerts",
                            "type": "Alert[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "alertId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extAlerts",
                            "type": "Alert[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "Alert[]",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, SecurityContext, NgZone } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\nexport type AlertType = \"success\" | \"danger\" | \"warning\" | \"info\";\n\nexport interface Alert {\n  id?: number;\n  type: AlertType;\n  message?: string;\n  timeout?: number;\n  toast?: boolean;\n  position?: string;\n  close?: (alerts: Alert[]) => void;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AlertService {\n  timeout = 5000;\n  toast = false;\n  position = \"top right\";\n\n  // unique id for each alert. Starts from 0.\n  private alertId = 0;\n  private alerts: Alert[] = [];\n\n  constructor(private sanitizer: DomSanitizer, private ngZone: NgZone) {}\n\n  clear(): void {\n    this.alerts = [];\n  }\n\n  get(): Alert[] {\n    return this.alerts;\n  }\n\n  /**\n   * Adds alert to alerts array and returns added alert.\n   * @param alert      Alert to add. If `timeout`, `toast` or `position` is missing then applying default value.\n   * @param extAlerts  If missing then adding `alert` to `AlertService` internal array and alerts can be retrieved by `get()`.\n   *                   Else adding `alert` to `extAlerts`.\n   * @returns  Added alert\n   */\n  addAlert(alert: Alert, extAlerts?: Alert[]): Alert {\n    alert.id = this.alertId++;\n\n    alert.message =\n      this.sanitizer.sanitize(SecurityContext.HTML, alert.message ?? \"\") ?? \"\";\n    alert.timeout = alert.timeout ?? this.timeout;\n    alert.toast = alert.toast ?? this.toast;\n    alert.position = alert.position ?? this.position;\n    alert.close = (alertsArray: Alert[]) =>\n      this.closeAlert(alert.id!, alertsArray);\n\n    (extAlerts ?? this.alerts).push(alert);\n\n    if (alert.timeout > 0) {\n      // Workaround protractor waiting for setTimeout.\n      // Reference https://www.protractortest.org/#/timeouts\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.ngZone.run(() => {\n            this.closeAlert(alert.id!, extAlerts ?? this.alerts);\n          });\n        }, alert.timeout);\n      });\n    }\n\n    return alert;\n  }\n\n  private closeAlert(alertId: number, extAlerts?: Alert[]): void {\n    const alerts = extAlerts ?? this.alerts;\n    const alertIndex = alerts.map((alert) => alert.id).indexOf(alertId);\n    // if found alert then remove\n    if (alertIndex >= 0) {\n      alerts.splice(alertIndex, 1);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApplicationConfigService",
            "id": "injectable-ApplicationConfigService-990235b660880b0ee74c27b53293cc2e9e6013f91f27c00ddbf2e5d7fa082df1910966a1cb7760a53558e8ed183516389cc0892976ef882da130b593480bdca8",
            "file": "src/app/core/config/application-config.service.ts",
            "properties": [
                {
                    "name": "endpointPrefix",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "microfrontend",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getEndpointFor",
                    "args": [
                        {
                            "name": "api",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "microservice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "api",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "microservice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMicrofrontend",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setEndpointPrefix",
                    "args": [
                        {
                            "name": "endpointPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpointPrefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMicrofrontend",
                    "args": [
                        {
                            "name": "microfrontend",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "microfrontend",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApplicationConfigService {\n  private endpointPrefix = \"\";\n  private microfrontend = false;\n\n  setEndpointPrefix(endpointPrefix: string): void {\n    this.endpointPrefix = endpointPrefix;\n  }\n\n  setMicrofrontend(microfrontend = true): void {\n    this.microfrontend = microfrontend;\n  }\n\n  isMicrofrontend(): boolean {\n    return this.microfrontend;\n  }\n\n  getEndpointFor(api: string, microservice?: string): string {\n    if (microservice) {\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\n    }\n    return `${this.endpointPrefix}${api}`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AuthServerProvider",
            "id": "injectable-AuthServerProvider-54cbec86d0ba4435edb9ffb4cfe5f45bfc9568706a8f4abdae8c85aa11a54e3da070cdd00f14ef57fbae2711cb0d5f673742ff0353b2656b3b2bad9ec6a79c41",
            "file": "src/app/core/auth/auth-jwt.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "authenticateSuccess",
                    "args": [
                        {
                            "name": "response",
                            "type": "JwtToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rememberMe",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "JwtToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rememberMe",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { LocalStorageService, SessionStorageService } from \"ngx-webstorage\";\n\nimport { ApplicationConfigService } from \"../config/application-config.service\";\nimport { Login } from \"app/login/login.model\";\n\ntype JwtToken = {\n  id_token: string;\n};\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthServerProvider {\n  constructor(\n    private http: HttpClient,\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  getToken(): string {\n    const tokenInLocalStorage: string | null =\n      this.localStorageService.retrieve(\"authenticationToken\");\n    const tokenInSessionStorage: string | null =\n      this.sessionStorageService.retrieve(\"authenticationToken\");\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? \"\";\n  }\n\n  login(credentials: Login): Observable<void> {\n    return this.http\n      .post<JwtToken>(\n        this.applicationConfigService.getEndpointFor(\"api/authenticate\"),\n        credentials\n      )\n      .pipe(\n        map((response) =>\n          this.authenticateSuccess(response, credentials.rememberMe)\n        )\n      );\n  }\n\n  logout(): Observable<void> {\n    return new Observable((observer) => {\n      this.localStorageService.clear(\"authenticationToken\");\n      this.sessionStorageService.clear(\"authenticationToken\");\n      observer.complete();\n    });\n  }\n\n  private authenticateSuccess(response: JwtToken, rememberMe: boolean): void {\n    const jwt = response.id_token;\n    if (rememberMe) {\n      this.localStorageService.store(\"authenticationToken\", jwt);\n      this.sessionStorageService.clear(\"authenticationToken\");\n    } else {\n      this.sessionStorageService.store(\"authenticationToken\", jwt);\n      this.localStorageService.clear(\"authenticationToken\");\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoryService",
            "id": "injectable-CategoryService-b6a63c06592ae857b7fa52133e1c572bd678b17c3ef50f85c5da9fbe4da022e1dad69f29a58c5f4018eadc4e71b86cec801c51e20cc970fcf918b980029a5c77",
            "file": "src/app/entities/category/service/category.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "this.applicationConfigService.getEndpointFor(\"api/categories\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addCategoryToCollectionIfMissing",
                    "args": [
                        {
                            "name": "categoryCollection",
                            "type": "ICategory[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoriesToCheck",
                            "type": "(ICategory | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ICategory[]",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryCollection",
                            "type": "ICategory[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoriesToCheck",
                            "type": "(ICategory | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateArrayFromServer",
                    "args": [
                        {
                            "name": "res",
                            "type": "EntityArrayResponseType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityArrayResponseType",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "EntityArrayResponseType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateFromClient",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ICategory",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateFromServer",
                    "args": [
                        {
                            "name": "res",
                            "type": "EntityResponseType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityResponseType",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "EntityResponseType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<literal type>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "partialUpdate",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "req",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityArrayResponseType>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport dayjs from \"dayjs/esm\";\n\nimport { isPresent } from \"app/core/util/operators\";\nimport { DATE_FORMAT } from \"app/config/input.constants\";\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { createRequestOption } from \"app/core/request/request-util\";\nimport { ICategory, getCategoryIdentifier } from \"../category.model\";\n\nexport type EntityResponseType = HttpResponse<ICategory>;\nexport type EntityArrayResponseType = HttpResponse<ICategory[]>;\n\n@Injectable({ providedIn: \"root\" })\nexport class CategoryService {\n  protected resourceUrl =\n    this.applicationConfigService.getEndpointFor(\"api/categories\");\n\n  constructor(\n    protected http: HttpClient,\n    protected applicationConfigService: ApplicationConfigService\n  ) {}\n\n  create(category: ICategory): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(category);\n    return this.http\n      .post<ICategory>(this.resourceUrl, copy, { observe: \"response\" })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(category: ICategory): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(category);\n    return this.http\n      .put<ICategory>(\n        `${this.resourceUrl}/${getCategoryIdentifier(category) as number}`,\n        copy,\n        { observe: \"response\" }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(category: ICategory): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(category);\n    return this.http\n      .patch<ICategory>(\n        `${this.resourceUrl}/${getCategoryIdentifier(category) as number}`,\n        copy,\n        { observe: \"response\" }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<ICategory>(`${this.resourceUrl}/${id}`, { observe: \"response\" })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<ICategory[]>(this.resourceUrl, {\n        params: options,\n        observe: \"response\",\n      })\n      .pipe(\n        map((res: EntityArrayResponseType) =>\n          this.convertDateArrayFromServer(res)\n        )\n      );\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: \"response\",\n    });\n  }\n\n  addCategoryToCollectionIfMissing(\n    categoryCollection: ICategory[],\n    ...categoriesToCheck: (ICategory | null | undefined)[]\n  ): ICategory[] {\n    const categories: ICategory[] = categoriesToCheck.filter(isPresent);\n    if (categories.length > 0) {\n      const categoryCollectionIdentifiers = categoryCollection.map(\n        (categoryItem) => getCategoryIdentifier(categoryItem)!\n      );\n      const categoriesToAdd = categories.filter((categoryItem) => {\n        const categoryIdentifier = getCategoryIdentifier(categoryItem);\n        if (\n          categoryIdentifier == null ||\n          categoryCollectionIdentifiers.includes(categoryIdentifier)\n        ) {\n          return false;\n        }\n        categoryCollectionIdentifiers.push(categoryIdentifier);\n        return true;\n      });\n      return [...categoriesToAdd, ...categoryCollection];\n    }\n    return categoryCollection;\n  }\n\n  protected convertDateFromClient(category: ICategory): ICategory {\n    return Object.assign({}, category, {\n      created: category.created?.isValid()\n        ? category.created.format(DATE_FORMAT)\n        : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.created = res.body.created ? dayjs(res.body.created) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(\n    res: EntityArrayResponseType\n  ): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((category: ICategory) => {\n        category.created = category.created\n          ? dayjs(category.created)\n          : undefined;\n      });\n    }\n    return res;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContactService",
            "id": "injectable-ContactService-fdfd483fcfe89a4b0576d31eab98b0f61fc10056960da01f28389df105eeffd6b11a77aeef24ba9f16e82a04751be19de404918184526fc40dd4b559fb507630",
            "file": "src/app/entities/contact/service/contact.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "this.applicationConfigService.getEndpointFor(\"api/contacts\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addContactToCollectionIfMissing",
                    "args": [
                        {
                            "name": "contactCollection",
                            "type": "IContact[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contactsToCheck",
                            "type": "(IContact | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IContact[]",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contactCollection",
                            "type": "IContact[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contactsToCheck",
                            "type": "(IContact | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateArrayFromServer",
                    "args": [
                        {
                            "name": "res",
                            "type": "EntityArrayResponseType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityArrayResponseType",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "EntityArrayResponseType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateFromClient",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IContact",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDateFromServer",
                    "args": [
                        {
                            "name": "res",
                            "type": "EntityResponseType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EntityResponseType",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "EntityResponseType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<literal type>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "partialUpdate",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "req",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityArrayResponseType>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityResponseType>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport dayjs from \"dayjs/esm\";\n\nimport { isPresent } from \"app/core/util/operators\";\nimport { DATE_FORMAT } from \"app/config/input.constants\";\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { createRequestOption } from \"app/core/request/request-util\";\nimport { IContact, getContactIdentifier } from \"../contact.model\";\n\nexport type EntityResponseType = HttpResponse<IContact>;\nexport type EntityArrayResponseType = HttpResponse<IContact[]>;\n\n@Injectable({ providedIn: \"root\" })\nexport class ContactService {\n  protected resourceUrl =\n    this.applicationConfigService.getEndpointFor(\"api/contacts\");\n\n  constructor(\n    protected http: HttpClient,\n    protected applicationConfigService: ApplicationConfigService\n  ) {}\n\n  create(contact: IContact): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(contact);\n    return this.http\n      .post<IContact>(this.resourceUrl, copy, { observe: \"response\" })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(contact: IContact): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(contact);\n    return this.http\n      .put<IContact>(\n        `${this.resourceUrl}/${getContactIdentifier(contact) as number}`,\n        copy,\n        { observe: \"response\" }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(contact: IContact): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(contact);\n    return this.http\n      .patch<IContact>(\n        `${this.resourceUrl}/${getContactIdentifier(contact) as number}`,\n        copy,\n        { observe: \"response\" }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IContact>(`${this.resourceUrl}/${id}`, { observe: \"response\" })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IContact[]>(this.resourceUrl, {\n        params: options,\n        observe: \"response\",\n      })\n      .pipe(\n        map((res: EntityArrayResponseType) =>\n          this.convertDateArrayFromServer(res)\n        )\n      );\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: \"response\",\n    });\n  }\n\n  addContactToCollectionIfMissing(\n    contactCollection: IContact[],\n    ...contactsToCheck: (IContact | null | undefined)[]\n  ): IContact[] {\n    const contacts: IContact[] = contactsToCheck.filter(isPresent);\n    if (contacts.length > 0) {\n      const contactCollectionIdentifiers = contactCollection.map(\n        (contactItem) => getContactIdentifier(contactItem)!\n      );\n      const contactsToAdd = contacts.filter((contactItem) => {\n        const contactIdentifier = getContactIdentifier(contactItem);\n        if (\n          contactIdentifier == null ||\n          contactCollectionIdentifiers.includes(contactIdentifier)\n        ) {\n          return false;\n        }\n        contactCollectionIdentifiers.push(contactIdentifier);\n        return true;\n      });\n      return [...contactsToAdd, ...contactCollection];\n    }\n    return contactCollection;\n  }\n\n  protected convertDateFromClient(contact: IContact): IContact {\n    return Object.assign({}, contact, {\n      birthDate: contact.birthDate?.isValid()\n        ? contact.birthDate.format(DATE_FORMAT)\n        : undefined,\n      created: contact.created?.isValid()\n        ? contact.created.format(DATE_FORMAT)\n        : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.birthDate = res.body.birthDate\n        ? dayjs(res.body.birthDate)\n        : undefined;\n      res.body.created = res.body.created ? dayjs(res.body.created) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(\n    res: EntityArrayResponseType\n  ): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((contact: IContact) => {\n        contact.birthDate = contact.birthDate\n          ? dayjs(contact.birthDate)\n          : undefined;\n        contact.created = contact.created ? dayjs(contact.created) : undefined;\n      });\n    }\n    return res;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataUtils",
            "id": "injectable-DataUtils-4b4b369ea30e06e5396fa6a7e155d774bbc050f8540bf6bb9d733e8e11695a25516d12302c93c0c8bb619fc380503b21b11afa4bb54fd172b918b5bcd884ab67",
            "file": "src/app/core/util/data-util.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "byteSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to find the byte size of the string provides\n",
                    "description": "<p>Method to find the byte size of the string provides</p>\n",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endsWith",
                    "args": [
                        {
                            "name": "suffix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "suffix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatAsBytes",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFileToForm",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "editForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isImage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\nand returns an observable.\n\n     or returns error as FileLoadError on failure\n",
                    "description": "<p>Sets the base 64 data &amp; file type of the 1st file on the event (event.target.files[0]) in the passed entity object\nand returns an observable.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> or returns error as FileLoadError on failure</code></pre></div>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1406,
                                "end": 1411,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1400,
                                "end": 1405,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the object containing the file (at event.target.files[0])</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1482,
                                "end": 1490,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "editForm"
                            },
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1476,
                                "end": 1481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the form group where the input field is located</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1551,
                                "end": 1556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1545,
                                "end": 1550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the field name to set the file&#39;s &#39;base 64 data&#39; on</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1620,
                                "end": 1627,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isImage"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1614,
                                "end": 1619,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>boolean representing if the file represented by the event is an image</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1704,
                                "end": 1711,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>an observable that loads file to form field and completes if sussessful\nor returns error as FileLoadError on failure</p>\n"
                        }
                    ]
                },
                {
                    "name": "openFile",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to open file\n",
                    "description": "<p>Method to open file</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paddingSize",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "size",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toBase64",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "base64Data",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to convert the file to base64\n",
                    "description": "<p>Method to convert the file to base64</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "base64Data",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>An utility service for data.</p>\n",
            "rawdescription": "\n\nAn utility service for data.\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { Observable, Observer } from \"rxjs\";\n\nexport type FileLoadErrorType = \"not.image\" | \"could.not.extract\";\n\nexport interface FileLoadError {\n  message: string;\n  key: FileLoadErrorType;\n  params?: any;\n}\n\n/**\n * An utility service for data.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataUtils {\n  /**\n   * Method to find the byte size of the string provides\n   */\n  byteSize(base64String: string): string {\n    return this.formatAsBytes(this.size(base64String));\n  }\n\n  /**\n   * Method to open file\n   */\n  openFile(data: string, contentType: string | null | undefined): void {\n    contentType = contentType ?? \"\";\n\n    const byteCharacters = atob(data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {\n      type: contentType,\n    });\n    const fileURL = window.URL.createObjectURL(blob);\n    const win = window.open(fileURL);\n    win!.onload = function () {\n      URL.revokeObjectURL(fileURL);\n    };\n  }\n\n  /**\n   * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object\n   * and returns an observable.\n   *\n   * @param event the object containing the file (at event.target.files[0])\n   * @param editForm the form group where the input field is located\n   * @param field the field name to set the file's 'base 64 data' on\n   * @param isImage boolean representing if the file represented by the event is an image\n   * @returns an observable that loads file to form field and completes if sussessful\n   *      or returns error as FileLoadError on failure\n   */\n  loadFileToForm(\n    event: Event,\n    editForm: FormGroup,\n    field: string,\n    isImage: boolean\n  ): Observable<void> {\n    return new Observable((observer: Observer<void>) => {\n      const eventTarget: HTMLInputElement | null =\n        event.target as HTMLInputElement | null;\n      if (eventTarget?.files?.[0]) {\n        const file: File = eventTarget.files[0];\n        if (isImage && !file.type.startsWith(\"image/\")) {\n          const error: FileLoadError = {\n            message: `File was expected to be an image but was found to be '${file.type}'`,\n            key: \"not.image\",\n            params: { fileType: file.type },\n          };\n          observer.error(error);\n        } else {\n          const fieldContentType: string = field + \"ContentType\";\n          this.toBase64(file, (base64Data: string) => {\n            editForm.patchValue({\n              [field]: base64Data,\n              [fieldContentType]: file.type,\n            });\n            observer.next();\n            observer.complete();\n          });\n        }\n      } else {\n        const error: FileLoadError = {\n          message: \"Could not extract file\",\n          key: \"could.not.extract\",\n          params: { event },\n        };\n        observer.error(error);\n      }\n    });\n  }\n\n  /**\n   * Method to convert the file to base64\n   */\n  private toBase64(file: File, callback: (base64Data: string) => void): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.onload = (e: ProgressEvent<FileReader>) => {\n      if (typeof e.target?.result === \"string\") {\n        const base64Data: string = e.target.result.substring(\n          e.target.result.indexOf(\"base64,\") + \"base64,\".length\n        );\n        callback(base64Data);\n      }\n    };\n    fileReader.readAsDataURL(file);\n  }\n\n  private endsWith(suffix: string, str: string): boolean {\n    return str.includes(suffix, str.length - suffix.length);\n  }\n\n  private paddingSize(value: string): number {\n    if (this.endsWith(\"==\", value)) {\n      return 2;\n    }\n    if (this.endsWith(\"=\", value)) {\n      return 1;\n    }\n    return 0;\n  }\n\n  private size(value: string): number {\n    return (value.length / 4) * 3 - this.paddingSize(value);\n  }\n\n  private formatAsBytes(size: number): string {\n    return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \") + \" bytes\";\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "EventManager",
            "id": "injectable-EventManager-e00f9565f7f6c869273beb20b5a9dacf6314506b0d29c694d6fe77273cde1e7152142ff362857ea2cdbc96a286aba71e58fd12b3258216fd04cc989cf00abe82",
            "file": "src/app/core/util/event-manager.service.ts",
            "properties": [
                {
                    "name": "observable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<EventWithContent | string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<EventWithContent | string>",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "broadcast",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventWithContent<> | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to broadcast the event to observer\n",
                    "description": "<p>Method to broadcast the event to observer</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventWithContent<> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [
                        {
                            "name": "subscriber",
                            "type": "Subscription",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to unsubscribe the subscription\n",
                    "description": "<p>Method to unsubscribe the subscription</p>\n",
                    "jsdoctags": [
                        {
                            "name": "subscriber",
                            "type": "Subscription",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "eventNames",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "event",
                                    "type": "EventWithContent<> | string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to subscribe to an event with callback\n",
                    "description": "<p>Method to subscribe to an event with callback</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 936,
                                "end": 946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "eventNames"
                            },
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 930,
                                "end": 935,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Single event name or array of event names to what subscribe</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1020,
                                "end": 1028,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "callback"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "event",
                                    "type": "EventWithContent<> | string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 1014,
                                "end": 1019,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to run when the event occurs</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>An utility class to manage RX events</p>\n",
            "rawdescription": "\n\nAn utility class to manage RX events\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { filter, share } from \"rxjs/operators\";\n\nexport class EventWithContent<T> {\n  constructor(public name: string, public content: T) {}\n}\n\n/**\n * An utility class to manage RX events\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EventManager {\n  observable: Observable<EventWithContent<unknown> | string>;\n  observer?: Observer<EventWithContent<unknown> | string>;\n\n  constructor() {\n    this.observable = new Observable(\n      (observer: Observer<EventWithContent<unknown> | string>) => {\n        this.observer = observer;\n      }\n    ).pipe(share());\n  }\n\n  /**\n   * Method to broadcast the event to observer\n   */\n  broadcast(event: EventWithContent<unknown> | string): void {\n    if (this.observer) {\n      this.observer.next(event);\n    }\n  }\n\n  /**\n   * Method to subscribe to an event with callback\n   * @param eventNames  Single event name or array of event names to what subscribe\n   * @param callback    Callback to run when the event occurs\n   */\n  subscribe(\n    eventNames: string | string[],\n    callback: (event: EventWithContent<unknown> | string) => void\n  ): Subscription {\n    if (typeof eventNames === \"string\") {\n      eventNames = [eventNames];\n    }\n    return this.observable\n      .pipe(\n        filter((event: EventWithContent<unknown> | string) => {\n          for (const eventName of eventNames) {\n            if (\n              (typeof event === \"string\" && event === eventName) ||\n              (typeof event !== \"string\" && event.name === eventName)\n            ) {\n              return true;\n            }\n          }\n          return false;\n        })\n      )\n      .subscribe(callback);\n  }\n\n  /**\n   * Method to unsubscribe the subscription\n   */\n  destroy(subscriber: Subscription): void {\n    subscriber.unsubscribe();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-7b4e702228d6878f405c4b9145ccfb443141af00413d2a702c721bf36c558c8e4f15f795761e2508bf5a36915aadfe1fb5209e37e86e0f41558728beee84a78d",
            "file": "src/app/login/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Account | null>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\nimport { Account } from \"app/core/auth/account.model\";\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { AuthServerProvider } from \"app/core/auth/auth-jwt.service\";\nimport { Login } from \"./login.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class LoginService {\n  constructor(\n    private accountService: AccountService,\n    private authServerProvider: AuthServerProvider\n  ) {}\n\n  login(credentials: Login): Observable<Account | null> {\n    return this.authServerProvider\n      .login(credentials)\n      .pipe(mergeMap(() => this.accountService.identity(true)));\n  }\n\n  logout(): void {\n    this.authServerProvider\n      .logout()\n      .subscribe({ complete: () => this.accountService.authenticate(null) });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authServerProvider",
                        "type": "AuthServerProvider",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authServerProvider",
                        "type": "AuthServerProvider",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NgbDateDayjsAdapter",
            "id": "injectable-NgbDateDayjsAdapter-7a29219e55bce8529f3606e74f8a31590502516d94ef847a86dc09c84ef5684092a00e3a5923ca7b0eebb3f91de2ae70243a550201365c6313e4a5df1c3a7600",
            "file": "src/app/config/datepicker-adapter.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fromModel",
                    "args": [
                        {
                            "name": "date",
                            "type": "dayjs.Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NgbDateStruct | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "dayjs.Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toModel",
                    "args": [
                        {
                            "name": "date",
                            "type": "NgbDateStruct | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "dayjs.Dayjs | null",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "NgbDateStruct | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { NgbDateAdapter, NgbDateStruct } from \"@ng-bootstrap/ng-bootstrap\";\nimport dayjs from \"dayjs/esm\";\n\n@Injectable()\nexport class NgbDateDayjsAdapter extends NgbDateAdapter<dayjs.Dayjs> {\n  fromModel(date: dayjs.Dayjs | null): NgbDateStruct | null {\n    if (date && dayjs.isDayjs(date) && date.isValid()) {\n      return { year: date.year(), month: date.month() + 1, day: date.date() };\n    }\n    return null;\n  }\n\n  toModel(date: NgbDateStruct | null): dayjs.Dayjs | null {\n    return date ? dayjs(`${date.year}-${date.month}-${date.day}`) : null;\n  }\n}\n",
            "extends": "NgbDateAdapter",
            "type": "injectable"
        },
        {
            "name": "PaginationConfig",
            "id": "injectable-PaginationConfig-4d4fa7fd2f391c0edea716537e341407928ebd6c93edb844c867a7df44999cc2e218614f8a29c1902417f821f3e5a8ebdf2843bfc5430fc1542f57d7c5179293",
            "file": "src/app/config/uib-pagination.config.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { NgbPaginationConfig } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { ITEMS_PER_PAGE } from \"app/config/pagination.constants\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PaginationConfig {\n  constructor(config: NgbPaginationConfig) {\n    config.boundaryLinks = true;\n    config.maxSize = 5;\n    config.pageSize = ITEMS_PER_PAGE;\n    config.size = \"sm\";\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "NgbPaginationConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "NgbPaginationConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ParseLinks",
            "id": "injectable-ParseLinks-8880567fa58184ce04bc7fbb2ffb801f9c1a201d9d345b2cc010ef79224c0748266fbf2f4f3c6048e6a864e6d1ef42a74e29089d0bd49196faa02d965cd0f682",
            "file": "src/app/core/util/parse-links.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to parse the links\n",
                    "description": "<p>Method to parse the links</p>\n",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>An utility service for link parsing.</p>\n",
            "rawdescription": "\n\nAn utility service for link parsing.\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\n/**\n * An utility service for link parsing.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ParseLinks {\n  /**\n   * Method to parse the links\n   */\n  parse(header: string): { [key: string]: number } {\n    if (header.length === 0) {\n      throw new Error(\"input must not be of zero length\");\n    }\n\n    // Split parts by comma\n    const parts: string[] = header.split(\",\");\n    const links: { [key: string]: number } = {};\n\n    // Parse each part into a named link\n    parts.forEach((p) => {\n      const section: string[] = p.split(\";\");\n\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n\n      const url: string = section[0].replace(/<(.*)>/, \"$1\").trim();\n      const queryString: { [key: string]: string | undefined } = {};\n\n      url.replace(\n        /([^?=&]+)(=([^&]*))?/g,\n        (\n          _$0: string,\n          $1: string | undefined,\n          _$2: string | undefined,\n          $3: string | undefined\n        ) => {\n          if ($1 !== undefined) {\n            queryString[$1] = $3;\n          }\n          return $3 ?? \"\";\n        }\n      );\n\n      if (queryString.page !== undefined) {\n        const name: string = section[1].replace(/rel=\"(.*)\"/, \"$1\").trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PasswordResetFinishService",
            "id": "injectable-PasswordResetFinishService-cf2b9a512b97071929336126edf5d66ef561688ab6dfa2fc41d3cbb7c438c058a0b931e81536d725442ae0bfa902f14036101cf83591ca9a2ed08d93d8c823a7",
            "file": "src/app/account/password-reset/finish/password-reset-finish.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PasswordResetFinishService {\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(key: string, newPassword: string): Observable<{}> {\n    return this.http.post(\n      this.applicationConfigService.getEndpointFor(\n        \"api/account/reset-password/finish\"\n      ),\n      { key, newPassword }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PasswordResetInitService",
            "id": "injectable-PasswordResetInitService-bc6b0685796623063502786b7ccbfe6b2a4eba0eb9b0067700dff2ec6b2d57bc3d947cfc0ed2e33b92fdd2094e6e1fcbfba1613d5ae4eecf784c84ef0fb1bbb2",
            "file": "src/app/account/password-reset/init/password-reset-init.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "mail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PasswordResetInitService {\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(mail: string): Observable<{}> {\n    return this.http.post(\n      this.applicationConfigService.getEndpointFor(\n        \"api/account/reset-password/init\"\n      ),\n      mail\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PasswordService",
            "id": "injectable-PasswordService-f65c8c3b6febc6e5c291e8da0fafa307e407350fd3d556695a857d4f947eff5caa773aca04cc6995f428e3faf92fca6d2b473464d9306b966e6079722151d949",
            "file": "src/app/account/password/password.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PasswordService {\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(\n      this.applicationConfigService.getEndpointFor(\n        \"api/account/change-password\"\n      ),\n      { currentPassword, newPassword }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-eed64bbee10eaa3e08445730ccee789c69d7831c267aa087eb90000a74663546974a427bc163a62381fa0bf1f939e79473fc264a34d46c79838fb3c3fa36f565",
            "file": "src/app/layouts/profiles/profile.service.ts",
            "properties": [
                {
                    "name": "infoUrl",
                    "defaultValue": "this.applicationConfigService.getEndpointFor(\"management/info\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "profileInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProfileInfo>",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProfileInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ProfileInfo>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map, shareReplay } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { ProfileInfo, InfoResponse } from \"./profile-info.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ProfileService {\n  private infoUrl =\n    this.applicationConfigService.getEndpointFor(\"management/info\");\n  private profileInfo$?: Observable<ProfileInfo>;\n\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  getProfileInfo(): Observable<ProfileInfo> {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\n      map((response: InfoResponse) => {\n        const profileInfo: ProfileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles?.includes(\"prod\"),\n          openAPIEnabled: response.activeProfiles?.includes(\"api-docs\"),\n        };\n        if (response.activeProfiles && response[\"display-ribbon-on-profiles\"]) {\n          const displayRibbonOnProfiles =\n            response[\"display-ribbon-on-profiles\"].split(\",\");\n          const ribbonProfiles = displayRibbonOnProfiles.filter((profile) =>\n            response.activeProfiles?.includes(profile)\n          );\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }),\n      shareReplay()\n    );\n    return this.profileInfo$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegisterService",
            "id": "injectable-RegisterService-a741a115f660e430b58f4840516f4c2bf557de9aeb94edf54889d1966e666b16c9b09d7f782ef48488c06b58385183164d39b145fd3ed3697657b22c3b54454c",
            "file": "src/app/account/register/register.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "registration",
                            "type": "Registration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registration",
                            "type": "Registration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { Registration } from \"./register.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class RegisterService {\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  save(registration: Registration): Observable<{}> {\n    return this.http.post(\n      this.applicationConfigService.getEndpointFor(\"api/register\"),\n      registration\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StateStorageService",
            "id": "injectable-StateStorageService-6c657b591c73bc3f36481a774dfb68e8603f85a243cf4dbcdcd1e953ac2897d4ebecd93deedb07c4a1a594f470a7b3a7d74b59fea3ea1748847d796bed0ac2c3",
            "file": "src/app/core/auth/state-storage.service.ts",
            "properties": [
                {
                    "name": "previousUrlKey",
                    "defaultValue": "\"previousUrl\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "storeUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { SessionStorageService } from \"ngx-webstorage\";\n\n@Injectable({ providedIn: \"root\" })\nexport class StateStorageService {\n  private previousUrlKey = \"previousUrl\";\n\n  constructor(private sessionStorageService: SessionStorageService) {}\n\n  storeUrl(url: string): void {\n    this.sessionStorageService.store(this.previousUrlKey, url);\n  }\n\n  getUrl(): string | null {\n    return this.sessionStorageService.retrieve(this.previousUrlKey) as\n      | string\n      | null;\n  }\n\n  clearUrl(): void {\n    this.sessionStorageService.clear(this.previousUrlKey);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserManagementService",
            "id": "injectable-UserManagementService-dba45d1541e0da42232f669ce2ddedfeb55f03a3bb032ea8cd953cd8b4827578cf21b87634f12a7262df4b637c67ba7ef787e9aee907cf2fee929cd65692b070",
            "file": "src/app/admin/user-management/service/user-management.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "this.applicationConfigService.getEndpointFor(\"api/admin/users\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authorities",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "req",
                            "type": "Pagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<IUser[]>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "Pagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport { Observable, of } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { createRequestOption } from \"app/core/request/request-util\";\nimport { Pagination } from \"app/core/request/request.model\";\nimport { IUser } from \"../user-management.model\";\nimport { Authority } from \"app/config/authority.constants\";\n\n@Injectable({ providedIn: \"root\" })\nexport class UserManagementService {\n  private resourceUrl =\n    this.applicationConfigService.getEndpointFor(\"api/admin/users\");\n\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  create(user: IUser): Observable<IUser> {\n    return this.http.post<IUser>(this.resourceUrl, user);\n  }\n\n  update(user: IUser): Observable<IUser> {\n    return this.http.put<IUser>(this.resourceUrl, user);\n  }\n\n  find(login: string): Observable<IUser> {\n    return this.http.get<IUser>(`${this.resourceUrl}/${login}`);\n  }\n\n  query(req?: Pagination): Observable<HttpResponse<IUser[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUser[]>(this.resourceUrl, {\n      params: options,\n      observe: \"response\",\n    });\n  }\n\n  delete(login: string): Observable<{}> {\n    return this.http.delete(`${this.resourceUrl}/${login}`);\n  }\n\n  authorities(): Observable<string[]> {\n    return of([Authority.ADMIN, Authority.USER]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-9f537cef1781257ceb7a5bd1f88ac4bb8a6cc965cae7ac25d9535273789f9dfa47b59f27992a5ffed49ff07c5ded42f1e5edcba4b4f83586fe36dc61c9f893eb",
            "file": "src/app/entities/user/user.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "this.applicationConfigService.getEndpointFor(\"api/users\")",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserToCollectionIfMissing",
                    "args": [
                        {
                            "name": "userCollection",
                            "type": "IUser[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "usersToCheck",
                            "type": "(IUser | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IUser[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCollection",
                            "type": "IUser[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "usersToCheck",
                            "type": "(IUser | null | undefined)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "req",
                            "type": "Pagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<IUser[]>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "Pagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport { createRequestOption } from \"app/core/request/request-util\";\nimport { isPresent } from \"app/core/util/operators\";\nimport { Pagination } from \"app/core/request/request.model\";\nimport { IUser, getUserIdentifier } from \"./user.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class UserService {\n  private resourceUrl =\n    this.applicationConfigService.getEndpointFor(\"api/users\");\n\n  constructor(\n    private http: HttpClient,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  query(req?: Pagination): Observable<HttpResponse<IUser[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUser[]>(this.resourceUrl, {\n      params: options,\n      observe: \"response\",\n    });\n  }\n\n  addUserToCollectionIfMissing(\n    userCollection: IUser[],\n    ...usersToCheck: (IUser | null | undefined)[]\n  ): IUser[] {\n    const users: IUser[] = usersToCheck.filter(isPresent);\n    if (users.length > 0) {\n      const userCollectionIdentifiers = userCollection.map(\n        (userItem) => getUserIdentifier(userItem)!\n      );\n      const usersToAdd = users.filter((userItem) => {\n        const userIdentifier = getUserIdentifier(userItem);\n        if (\n          userIdentifier == null ||\n          userCollectionIdentifiers.includes(userIdentifier)\n        ) {\n          return false;\n        }\n        userCollectionIdentifiers.push(userIdentifier);\n        return true;\n      });\n      return [...usersToAdd, ...userCollection];\n    }\n    return userCollection;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "CategoryRoutingResolveService",
            "id": "injectable-CategoryRoutingResolveService-4847e5d038c8631713134ff5156f771a2b87805c1b87d7ce2bbf8f73ec9278c79b87f4e0ae34291cf7c4820c99656f819603eb8729becbafbd8996ce03f208b1",
            "file": "src/app/entities/category/route/category-routing-resolve.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Observable",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { Resolve, ActivatedRouteSnapshot, Router } from \"@angular/router\";\nimport { Observable, of, EMPTY } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\nimport { ICategory, Category } from \"../category.model\";\nimport { CategoryService } from \"../service/category.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class CategoryRoutingResolveService implements Resolve<ICategory> {\n  constructor(protected service: CategoryService, protected router: Router) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot\n  ): Observable<ICategory> | Observable<never> {\n    const id = route.params[\"id\"];\n    if (id) {\n      return this.service.find(id).pipe(\n        mergeMap((category: HttpResponse<Category>) => {\n          if (category.body) {\n            return of(category.body);\n          } else {\n            this.router.navigate([\"404\"]);\n            return EMPTY;\n          }\n        })\n      );\n    }\n    return of(new Category());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ContactRoutingResolveService",
            "id": "injectable-ContactRoutingResolveService-cfbcd16c62c5f3e6ba125eb9f06fa15aaf711eb5646ee158b278976fcb207fdf138da5f28a946a3fba94689331ea4f8063dda631a22185c77dbce2891fd88d64",
            "file": "src/app/entities/contact/route/contact-routing-resolve.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Observable",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { Resolve, ActivatedRouteSnapshot, Router } from \"@angular/router\";\nimport { Observable, of, EMPTY } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\nimport { IContact, Contact } from \"../contact.model\";\nimport { ContactService } from \"../service/contact.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ContactRoutingResolveService implements Resolve<IContact> {\n  constructor(protected service: ContactService, protected router: Router) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot\n  ): Observable<IContact> | Observable<never> {\n    const id = route.params[\"id\"];\n    if (id) {\n      return this.service.find(id).pipe(\n        mergeMap((contact: HttpResponse<Contact>) => {\n          if (contact.body) {\n            return of(contact.body);\n          } else {\n            this.router.navigate([\"404\"]);\n            return EMPTY;\n          }\n        })\n      );\n    }\n    return of(new Contact());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "UserManagementResolve",
            "id": "injectable-UserManagementResolve-1e88776ba7a70381f9463544aba39f051bd88b2e8345e532e106ab22d604a92a04930d9435b223eed6673c732ce2641b88006366b89421746d0afd840a2645a9",
            "file": "src/app/admin/user-management/user-management.route.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUser>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Resolve, ActivatedRouteSnapshot, Routes } from \"@angular/router\";\nimport { Observable, of } from \"rxjs\";\n\nimport { User, IUser } from \"./user-management.model\";\nimport { UserManagementService } from \"./service/user-management.service\";\nimport { UserManagementComponent } from \"./list/user-management.component\";\nimport { UserManagementDetailComponent } from \"./detail/user-management-detail.component\";\nimport { UserManagementUpdateComponent } from \"./update/user-management-update.component\";\n\n@Injectable({ providedIn: \"root\" })\nexport class UserManagementResolve implements Resolve<IUser> {\n  constructor(private service: UserManagementService) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable<IUser> {\n    const id = route.params[\"login\"];\n    if (id) {\n      return this.service.find(id);\n    }\n    return of(new User());\n  }\n}\n\nexport const userManagementRoute: Routes = [\n  {\n    path: \"\",\n    component: UserManagementComponent,\n    data: {\n      defaultSort: \"id,asc\",\n    },\n  },\n  {\n    path: \":login/view\",\n    component: UserManagementDetailComponent,\n    resolve: {\n      user: UserManagementResolve,\n    },\n  },\n  {\n    path: \"new\",\n    component: UserManagementUpdateComponent,\n    resolve: {\n      user: UserManagementResolve,\n    },\n  },\n  {\n    path: \":login/edit\",\n    component: UserManagementUpdateComponent,\n    resolve: {\n      user: UserManagementResolve,\n    },\n  },\n];\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "UserRouteAccessService",
            "id": "injectable-UserRouteAccessService-a46c6f06742ba5f567b119b1cd39cd92ec735fa91fade10860975533e652c8f1eac12880d36eaaa7d3914507afe4c1045480a3786c61de5a045d0ad882565d41",
            "file": "src/app/core/auth/user-route-access.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, isDevMode } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { StateStorageService } from \"./state-storage.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class UserRouteAccessService implements CanActivate {\n  constructor(\n    private router: Router,\n    private accountService: AccountService,\n    private stateStorageService: StateStorageService\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.accountService.identity().pipe(\n      map((account) => {\n        if (account) {\n          const authorities = route.data[\"authorities\"];\n\n          if (\n            !authorities ||\n            authorities.length === 0 ||\n            this.accountService.hasAnyAuthority(authorities)\n          ) {\n            return true;\n          }\n\n          if (isDevMode()) {\n            console.error(\n              \"User has not any of required authorities: \",\n              authorities\n            );\n          }\n          this.router.navigate([\"accessdenied\"]);\n          return false;\n        }\n\n        this.stateStorageService.storeUrl(state.url);\n        this.router.navigate([\"/login\"]);\n        return false;\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthExpiredInterceptor",
            "id": "injectable-AuthExpiredInterceptor-87786d68175ecfa6e226c029baffe380f1925945834741bc3a6c82a7622b9159c669f3c96601e3236a7703f03eaf48ee6765b5d3b05d22ed13a7c0eed8f3631a",
            "file": "src/app/core/interceptor/auth-expired.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\n\nimport { LoginService } from \"app/login/login.service\";\nimport { StateStorageService } from \"app/core/auth/state-storage.service\";\nimport { AccountService } from \"app/core/auth/account.service\";\n\n@Injectable()\nexport class AuthExpiredInterceptor implements HttpInterceptor {\n  constructor(\n    private loginService: LoginService,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private accountService: AccountService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap({\n        error: (err: HttpErrorResponse) => {\n          if (\n            err.status === 401 &&\n            err.url &&\n            !err.url.includes(\"api/account\") &&\n            this.accountService.isAuthenticated()\n          ) {\n            this.stateStorageService.storeUrl(\n              this.router.routerState.snapshot.url\n            );\n            this.loginService.logout();\n            this.router.navigate([\"/login\"]);\n          }\n        },\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateStorageService",
                        "type": "StateStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-9cf53c38629cc48ac1a1243650992dabf4d9ba32d94a464883686aabdad3b39a15fdec3133ca4075c9a4f734506e296d8f0f32da0943712724f940d4b730fb82",
            "file": "src/app/core/interceptor/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { LocalStorageService, SessionStorageService } from \"ngx-webstorage\";\n\nimport { ApplicationConfigService } from \"../config/application-config.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private localStorageService: LocalStorageService,\n    private sessionStorageService: SessionStorageService,\n    private applicationConfigService: ApplicationConfigService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const serverApiUrl = this.applicationConfigService.getEndpointFor(\"\");\n    if (\n      !request.url ||\n      (request.url.startsWith(\"http\") &&\n        !(serverApiUrl && request.url.startsWith(serverApiUrl)))\n    ) {\n      return next.handle(request);\n    }\n\n    const token: string | null =\n      this.localStorageService.retrieve(\"authenticationToken\") ??\n      this.sessionStorageService.retrieve(\"authenticationToken\");\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionStorageService",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationConfigService",
                        "type": "ApplicationConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "ErrorHandlerInterceptor",
            "id": "injectable-ErrorHandlerInterceptor-883ad6aa21cea7295e3d70641dc2103a40180131a4f2cf89a80efe6bc94fbfa25d59b237a64a49747b223132a76092b1df3428191c9db3e5dd0ce6b389ea7a38",
            "file": "src/app/core/interceptor/error-handler.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpErrorResponse,\n  HttpHandler,\n  HttpEvent,\n} from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nimport {\n  EventManager,\n  EventWithContent,\n} from \"app/core/util/event-manager.service\";\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n  constructor(private eventManager: EventManager) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap({\n        error: (err: HttpErrorResponse) => {\n          if (\n            !(\n              err.status === 401 &&\n              (err.message === \"\" || err.url?.includes(\"api/account\"))\n            )\n          ) {\n            this.eventManager.broadcast(\n              new EventWithContent(\"contactProApp.httpError\", err)\n            );\n          }\n        },\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "NotificationInterceptor",
            "id": "injectable-NotificationInterceptor-46405ca769e21bf6ba2bab86e269762761dff0c66d14934edf601ad1436b67ec387b619b75d382782271e092c8f22426420d0cd2ef688ce1c060a82335a06818",
            "file": "src/app/core/interceptor/notification.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n  HttpHandler,\n  HttpEvent,\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nimport { AlertService } from \"app/core/util/alert.service\";\n\n@Injectable()\nexport class NotificationInterceptor implements HttpInterceptor {\n  constructor(private alertService: AlertService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          let alert: string | null = null;\n\n          for (const headerKey of event.headers.keys()) {\n            if (headerKey.toLowerCase().endsWith(\"app-alert\")) {\n              alert = event.headers.get(headerKey);\n            }\n          }\n\n          if (alert) {\n            this.alertService.addAlert({\n              type: \"success\",\n              message: alert,\n            });\n          }\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Account",
            "id": "class-Account-1fbf6d6a5dd8e740ad8f8bb6faa6566e40ccaadc79484e15c0c03fbfe7012bb02d6abc906015c5529311b13bc3703468dad50e0883381f25e5464afa5e048f1b",
            "file": "src/app/core/auth/account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Account {\n  constructor(\n    public activated: boolean,\n    public authorities: string[],\n    public email: string,\n    public firstName: string | null,\n    public langKey: string,\n    public lastName: string | null,\n    public login: string,\n    public imageUrl: string | null\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activated",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authorities",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firstName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lastName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageUrl",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "activated",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorities",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firstName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageUrl",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "langKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AlertError",
            "id": "class-AlertError-7b787c4e27dcc6b31c5430fd98601f347d8ad6c23e0e66ab0eac1ab3cf0ffcee420a8b35fe3bfd01fbb43093ab5c20fd660c9ccc7a7fa46e4e6526135ea8a0c7",
            "file": "src/app/shared/alert/alert-error.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AlertError {\n  constructor(public message: string) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Category",
            "id": "class-Category-02347d67da71812c8594a49daf847681d1214f11b535da72f68a55d7ed774dcbc3339659806cffd5a7659af85afc55dba3ac38c57b018a680ee732e2b74d20d8",
            "file": "src/app/entities/category/category.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import dayjs from \"dayjs/esm\";\nimport { IContact } from \"app/entities/contact/contact.model\";\nimport { IUser } from \"app/entities/user/user.model\";\n\nexport interface ICategory {\n  id?: number;\n  name?: string;\n  created?: dayjs.Dayjs | null;\n  contacts?: IContact[] | null;\n  user?: IUser | null;\n}\n\nexport class Category implements ICategory {\n  constructor(\n    public id?: number,\n    public name?: string,\n    public created?: dayjs.Dayjs | null,\n    public contacts?: IContact[] | null,\n    public user?: IUser | null\n  ) {}\n}\n\nexport function getCategoryIdentifier(category: ICategory): number | undefined {\n  return category.id;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "created",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "contacts",
                        "type": "IContact[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "user",
                        "type": "IUser | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "created",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contacts",
                        "type": "IContact[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "IUser | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "contacts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact[] | null",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser | null",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICategory"
            ]
        },
        {
            "name": "Contact",
            "id": "class-Contact-a6c772fd676dc1d05bc5d7765c435ed2767b87b96f9c6913ff5d67422788b5a01d545d9a325cf4f9bc4974bfe39a055108685ba18bdeb5a17ae69c68662c4821",
            "file": "src/app/entities/contact/contact.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import dayjs from \"dayjs/esm\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { ICategory } from \"app/entities/category/category.model\";\nimport { States } from \"app/entities/enumerations/states.model\";\n\nexport interface IContact {\n  id?: number;\n  firstName?: string;\n  lastName?: string;\n  address1?: string;\n  address2?: string | null;\n  city?: string;\n  state?: States;\n  zipCode?: string;\n  email?: string;\n  phoneNumber?: string;\n  birthDate?: dayjs.Dayjs | null;\n  created?: dayjs.Dayjs | null;\n  imageDataContentType?: string | null;\n  imageData?: string | null;\n  imageType?: string | null;\n  user?: IUser | null;\n  categories?: ICategory[] | null;\n}\n\nexport class Contact implements IContact {\n  constructor(\n    public id?: number,\n    public firstName?: string,\n    public lastName?: string,\n    public address1?: string,\n    public address2?: string | null,\n    public city?: string,\n    public state?: States,\n    public zipCode?: string,\n    public email?: string,\n    public phoneNumber?: string,\n    public birthDate?: dayjs.Dayjs | null,\n    public created?: dayjs.Dayjs | null,\n    public imageDataContentType?: string | null,\n    public imageData?: string | null,\n    public imageType?: string | null,\n    public user?: IUser | null,\n    public categories?: ICategory[] | null\n  ) {}\n}\n\nexport function getContactIdentifier(contact: IContact): number | undefined {\n  return contact.id;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "firstName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "lastName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "address1",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "address2",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "city",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "state",
                        "type": "States",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "zipCode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "phoneNumber",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "birthDate",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "created",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "imageDataContentType",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "imageData",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "imageType",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "user",
                        "type": "IUser | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "categories",
                        "type": "ICategory[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firstName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "address1",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "address2",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "city",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "States",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zipCode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "phoneNumber",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "birthDate",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "created",
                        "type": "dayjs.Dayjs | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageDataContentType",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageData",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imageType",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "IUser | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categories",
                        "type": "ICategory[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "address1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "address2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICategory[] | null",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "dayjs.Dayjs | null",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageDataContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "phoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "States",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser | null",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "zipCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IContact"
            ]
        },
        {
            "name": "EventWithContent",
            "id": "class-EventWithContent-e00f9565f7f6c869273beb20b5a9dacf6314506b0d29c694d6fe77273cde1e7152142ff362857ea2cdbc96a286aba71e58fd12b3258216fd04cc989cf00abe82",
            "file": "src/app/core/util/event-manager.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { filter, share } from \"rxjs/operators\";\n\nexport class EventWithContent<T> {\n  constructor(public name: string, public content: T) {}\n}\n\n/**\n * An utility class to manage RX events\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EventManager {\n  observable: Observable<EventWithContent<unknown> | string>;\n  observer?: Observer<EventWithContent<unknown> | string>;\n\n  constructor() {\n    this.observable = new Observable(\n      (observer: Observer<EventWithContent<unknown> | string>) => {\n        this.observer = observer;\n      }\n    ).pipe(share());\n  }\n\n  /**\n   * Method to broadcast the event to observer\n   */\n  broadcast(event: EventWithContent<unknown> | string): void {\n    if (this.observer) {\n      this.observer.next(event);\n    }\n  }\n\n  /**\n   * Method to subscribe to an event with callback\n   * @param eventNames  Single event name or array of event names to what subscribe\n   * @param callback    Callback to run when the event occurs\n   */\n  subscribe(\n    eventNames: string | string[],\n    callback: (event: EventWithContent<unknown> | string) => void\n  ): Subscription {\n    if (typeof eventNames === \"string\") {\n      eventNames = [eventNames];\n    }\n    return this.observable\n      .pipe(\n        filter((event: EventWithContent<unknown> | string) => {\n          for (const eventName of eventNames) {\n            if (\n              (typeof event === \"string\" && event === eventName) ||\n              (typeof event !== \"string\" && event.name === eventName)\n            ) {\n              return true;\n            }\n          }\n          return false;\n        })\n      )\n      .subscribe(callback);\n  }\n\n  /**\n   * Method to unsubscribe the subscription\n   */\n  destroy(subscriber: Subscription): void {\n    subscriber.unsubscribe();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "content",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "content",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Login",
            "id": "class-Login-1068fe9991e5d847d4c05dc71389a6c71f9e88ed985b592c10911c29995bc5177396971c57c3b22deb0938289be2cc8b09f386c5676a88cda98196cafcd47aa0",
            "file": "src/app/login/login.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Login {\n  constructor(\n    public username: string,\n    public password: string,\n    public rememberMe: boolean\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "username",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rememberMe",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "username",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rememberMe",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rememberMe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfileInfo",
            "id": "class-ProfileInfo-2b33c6ff07399c8c2e3518408e00dfe82ae26430139d7aedd16ae6e390c4a59a0d815d0ce725d902eac675a609b30380d7a917da4194f57c6ca65262e9e780cd",
            "file": "src/app/layouts/profiles/profile-info.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface InfoResponse {\n  \"display-ribbon-on-profiles\"?: string;\n  git?: any;\n  build?: any;\n  activeProfiles?: string[];\n}\n\nexport class ProfileInfo {\n  constructor(\n    public activeProfiles?: string[],\n    public ribbonEnv?: string,\n    public inProduction?: boolean,\n    public openAPIEnabled?: boolean\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activeProfiles",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ribbonEnv",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "inProduction",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "openAPIEnabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "activeProfiles",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ribbonEnv",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inProduction",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "openAPIEnabled",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activeProfiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inProduction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "openAPIEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ribbonEnv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Registration",
            "id": "class-Registration-75981c42ce3463569653602d35bfee021557e20f473657e80e183143126e1d7716368bafd82f0f00c27020a58afc7a9e4dd117580f074fecb56dab105232c0b2",
            "file": "src/app/account/register/register.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Registration {\n  constructor(\n    public login: string,\n    public email: string,\n    public password: string,\n    public langKey: string\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "langKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-e3a8047d1a021a2e7c2988a6f960789f4dfe552847bfc4ef3fba3ee678870cebf802effc8239b5b63e8b99c4f97861187ca99891d8d3b622cf552c1498ab8b15",
            "file": "src/app/admin/user-management/user-management.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IUser {\n  id?: string;\n  login?: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  email?: string;\n  activated?: boolean;\n  langKey?: string;\n  authorities?: string[];\n  createdBy?: string;\n  createdDate?: Date;\n  lastModifiedBy?: string;\n  lastModifiedDate?: Date;\n}\n\nexport class User implements IUser {\n  constructor(\n    public id?: string,\n    public login?: string,\n    public firstName?: string | null,\n    public lastName?: string | null,\n    public email?: string,\n    public activated?: boolean,\n    public langKey?: string,\n    public authorities?: string[],\n    public createdBy?: string,\n    public createdDate?: Date,\n    public lastModifiedBy?: string,\n    public lastModifiedDate?: Date\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "firstName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "lastName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "activated",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "authorities",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "createdBy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firstName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastName",
                        "type": "string | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activated",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "langKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorities",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdBy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedBy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastModifiedDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createdDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "langKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastModifiedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastModifiedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IUser"
            ]
        },
        {
            "name": "User",
            "id": "class-User-e248d642a88befe0af5944ab38d58046881e3239ae58cd9dc86d97465835842e95aa2d7f795b74ad8262ecb65609518c298090b15e74b31bc30564f49510fc66-1",
            "file": "src/app/entities/user/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IUser {\n  id?: string;\n  login?: string;\n}\n\nexport class User implements IUser {\n  constructor(public id: string, public login: string) {}\n}\n\nexport function getUserIdentifier(user: IUser): string | undefined {\n  return user.id;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "login",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IUser"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "directives": [
        {
            "name": "HasAnyAuthorityDirective",
            "id": "directive-HasAnyAuthorityDirective-6dfe5fac0020f7500aa20b92177838661cf38ed5f5f6376ddac43567ea42d69054ccab274ee1d821b5507c7371c0d4de48b6ee4544dd83c349b13fc6aa97f7ec",
            "file": "src/app/shared/auth/has-any-authority.directive.ts",
            "type": "directive",
            "description": "<p>of the authorities passed as the <code>expression</code>.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\">    &lt;some-element *jhiHasAnyAuthority=&quot;&#39;ROLE_ADMIN&#39;&quot;&gt;...&lt;/some-element&gt;\n\n    &lt;some-element *jhiHasAnyAuthority=&quot;[&#39;ROLE_ADMIN&#39;, &#39;ROLE_USER&#39;]&quot;&gt;...&lt;/some-element&gt;</code></pre></div>",
            "rawdescription": "\n\nof the authorities passed as the `expression`.\n\n```\n    <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n\n    <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n```\n",
            "sourceCode": "import {\n  Directive,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n  OnDestroy,\n} from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\n\n/**\n * @whatItDoes Conditionally includes an HTML element if current user has any\n * of the authorities passed as the `expression`.\n *\n * @howToUse\n * ```\n *     <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n *\n *     <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n * ```\n */\n@Directive({\n  selector: \"[jhiHasAnyAuthority]\",\n})\nexport class HasAnyAuthorityDirective implements OnDestroy {\n  private authorities!: string | string[];\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(\n    private accountService: AccountService,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  @Input()\n  set jhiHasAnyAuthority(value: string | string[]) {\n    this.authorities = value;\n    this.updateView();\n    // Get notified each time authentication state changes.\n    this.accountService\n      .getAuthenticationState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateView();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateView(): void {\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(\n      this.authorities\n    );\n    this.viewContainerRef.clear();\n    if (hasAnyAuthority) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\n",
            "selector": "[jhiHasAnyAuthority]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "jhiHasAnyAuthority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string | []",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "authorities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "jhiHasAnyAuthority": {
                    "name": "jhiHasAnyAuthority",
                    "setSignature": {
                        "name": "jhiHasAnyAuthority",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SortByDirective",
            "id": "directive-SortByDirective-63f3321582d9228ef2a4e8175f294a73b9172d9cbbbc1f34d44c859f8c2b41741528285bcbdd491831e01f73dd291be6610e1043eb3cbe2f6f7f1070e1317a33",
            "file": "src/app/shared/sort/sort-by.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  ContentChild,\n  Directive,\n  Host,\n  HostListener,\n  Input,\n  OnDestroy,\n} from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { FaIconComponent } from \"@fortawesome/angular-fontawesome\";\nimport {\n  faSort,\n  faSortDown,\n  faSortUp,\n  IconDefinition,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { SortDirective } from \"./sort.directive\";\n\n@Directive({\n  selector: \"[jhiSortBy]\",\n})\nexport class SortByDirective<T> implements AfterContentInit, OnDestroy {\n  @Input() jhiSortBy!: T;\n\n  @ContentChild(FaIconComponent, { static: false })\n  iconComponent?: FaIconComponent;\n\n  sortIcon = faSort;\n  sortAscIcon = faSortUp;\n  sortDescIcon = faSortDown;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(@Host() private sort: SortDirective<T>) {\n    sort.predicateChange\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.updateIconDefinition());\n    sort.ascendingChange\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.updateIconDefinition());\n  }\n\n  @HostListener(\"click\")\n  onClick(): void {\n    if (this.iconComponent) {\n      this.sort.sort(this.jhiSortBy);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.updateIconDefinition();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIconDefinition(): void {\n    if (this.iconComponent) {\n      let icon: IconDefinition = this.sortIcon;\n      if (this.sort.predicate === this.jhiSortBy) {\n        icon = this.sort.ascending ? this.sortAscIcon : this.sortDescIcon;\n      }\n      this.iconComponent.icon = icon.iconName;\n      this.iconComponent.render();\n    }\n  }\n}\n",
            "selector": "[jhiSortBy]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "jhiSortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "iconComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FaIconComponent",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "FaIconComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "sortAscIcon",
                    "defaultValue": "faSortUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sortDescIcon",
                    "defaultValue": "faSortDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sortIcon",
                    "defaultValue": "faSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "updateIconDefinition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "implements": [
                "AfterContentInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sort",
                        "type": "SortDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "sort",
                        "type": "SortDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SortDirective",
            "id": "directive-SortDirective-7b3d756d1098a66f53cc5d4b0b69b5a9e689db15096189d5494d43811a38285cc3b6b3fe1c5fb9ee06979c59bb1971e059d86f857dc3ff94eee784f54c68167a",
            "file": "src/app/shared/sort/sort.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n@Directive({\n  selector: \"[jhiSort]\",\n})\nexport class SortDirective<T> {\n  @Input()\n  get predicate(): T | undefined {\n    return this._predicate;\n  }\n  set predicate(predicate: T | undefined) {\n    this._predicate = predicate;\n    this.predicateChange.emit(predicate);\n  }\n\n  @Input()\n  get ascending(): boolean | undefined {\n    return this._ascending;\n  }\n  set ascending(ascending: boolean | undefined) {\n    this._ascending = ascending;\n    this.ascendingChange.emit(ascending);\n  }\n\n  @Output() predicateChange = new EventEmitter<T>();\n  @Output() ascendingChange = new EventEmitter<boolean>();\n  @Output() sortChange = new EventEmitter<{\n    predicate: T;\n    ascending: boolean;\n  }>();\n\n  private _predicate?: T;\n  private _ascending?: boolean;\n\n  sort(field: T): void {\n    this.ascending = field !== this.predicate ? true : !this.ascending;\n    this.predicate = field;\n    this.predicateChange.emit(field);\n    this.ascendingChange.emit(this.ascending);\n    this.sortChange.emit({\n      predicate: this.predicate,\n      ascending: this.ascending,\n    });\n  }\n}\n",
            "selector": "[jhiSort]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ascending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "predicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "T | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ascendingChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "predicateChange",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<{\n    predicate: T;\n    ascending: boolean;\n  }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_ascending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_predicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "accessors": {
                "predicate": {
                    "name": "predicate",
                    "setSignature": {
                        "name": "predicate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "predicate",
                                "type": "T | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "predicate",
                                "type": "T | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "predicate",
                        "type": "",
                        "returnType": "T | undefined",
                        "line": 8
                    }
                },
                "ascending": {
                    "name": "ascending",
                    "setSignature": {
                        "name": "ascending",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "ascending",
                                "type": "boolean | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "ascending",
                                "type": "boolean | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ascending",
                        "type": "",
                        "returnType": "boolean | undefined",
                        "line": 17
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ActivateComponent",
            "id": "component-ActivateComponent-33ebbac14e6c9021b310f9e4fe6c41bc231de767c0b458b780992536466cdfbe8e4e352458eb73ef19dad7a38eda77fa528596d4f5f9d3f223abff2e40036659",
            "file": "src/app/account/activate/activate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-activate",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./activate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { mergeMap } from \"rxjs/operators\";\n\nimport { ActivateService } from \"./activate.service\";\n\n@Component({\n  selector: \"jhi-activate\",\n  templateUrl: \"./activate.component.html\",\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(\n    private activateService: ActivateService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams\n      .pipe(mergeMap((params) => this.activateService.get(params.key)))\n      .subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activateService",
                        "type": "ActivateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activateService",
                        "type": "ActivateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1>Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span\n          ><strong>Your user account has been activated.</strong> Please\n        </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <strong>Your user could not be activated.</strong> Please use the\n        registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-49d4dc7ba420dcf41d4207e5b83616e84cd81fb783333cd8a33283a619b4b13a9de5909ce257e6cd195a3924fcf01acbedb83e191cbff95d8877f3240822d71b",
            "file": "src/app/shared/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setClasses",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\n\nimport { AlertService, Alert } from \"app/core/util/alert.service\";\n\n@Component({\n  selector: \"jhi-alert\",\n  templateUrl: \"./alert.component.html\",\n})\nexport class AlertComponent implements OnInit, OnDestroy {\n  alerts: Alert[] = [];\n\n  constructor(private alertService: AlertService) {}\n\n  ngOnInit(): void {\n    this.alerts = this.alertService.get();\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { \"jhi-toast\": Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.alertService.clear();\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert\n      *ngIf=\"alert.message\"\n      [type]=\"alert.type\"\n      (closed)=\"close(alert)\"\n    >\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n"
        },
        {
            "name": "AlertErrorComponent",
            "id": "component-AlertErrorComponent-2912cec08c7abc530a66251131e6933403f939428790ef2cc4e22186775aa5a65990b7de96aec5c76f293fbac518340ff96b79ee6bdaf114e7ca700a36733e70",
            "file": "src/app/shared/alert/alert-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-alert-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errorListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "httpErrorListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addErrorAlert",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setClasses",
                    "args": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "alert",
                            "type": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Subscription } from \"rxjs\";\n\nimport { AlertError } from \"./alert-error.model\";\nimport { Alert, AlertService } from \"app/core/util/alert.service\";\nimport {\n  EventManager,\n  EventWithContent,\n} from \"app/core/util/event-manager.service\";\n\n@Component({\n  selector: \"jhi-alert-error\",\n  templateUrl: \"./alert-error.component.html\",\n})\nexport class AlertErrorComponent implements OnDestroy {\n  alerts: Alert[] = [];\n  errorListener: Subscription;\n  httpErrorListener: Subscription;\n\n  constructor(\n    private alertService: AlertService,\n    private eventManager: EventManager\n  ) {\n    this.errorListener = eventManager.subscribe(\n      \"contactProApp.error\",\n      (response: EventWithContent<unknown> | string) => {\n        const errorResponse = (response as EventWithContent<AlertError>)\n          .content;\n        this.addErrorAlert(errorResponse.message);\n      }\n    );\n\n    this.httpErrorListener = eventManager.subscribe(\n      \"contactProApp.httpError\",\n      (response: EventWithContent<unknown> | string) => {\n        const httpErrorResponse = (\n          response as EventWithContent<HttpErrorResponse>\n        ).content;\n        switch (httpErrorResponse.status) {\n          // connection refused, server not reachable\n          case 0:\n            this.addErrorAlert(\"Server not reachable\");\n            break;\n\n          case 400: {\n            const arr = httpErrorResponse.headers.keys();\n            let errorHeader: string | null = null;\n            for (const entry of arr) {\n              if (entry.toLowerCase().endsWith(\"app-error\")) {\n                errorHeader = httpErrorResponse.headers.get(entry);\n              }\n            }\n            if (errorHeader) {\n              this.addErrorAlert(errorHeader);\n            } else if (\n              httpErrorResponse.error !== \"\" &&\n              httpErrorResponse.error.fieldErrors\n            ) {\n              const fieldErrors = httpErrorResponse.error.fieldErrors;\n              for (const fieldError of fieldErrors) {\n                if (\n                  [\"Min\", \"Max\", \"DecimalMin\", \"DecimalMax\"].includes(\n                    fieldError.message\n                  )\n                ) {\n                  fieldError.message = \"Size\";\n                }\n                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                const convertedField: string = fieldError.field.replace(\n                  /\\[\\d*\\]/g,\n                  \"[]\"\n                );\n                const fieldName: string =\n                  convertedField.charAt(0).toUpperCase() +\n                  convertedField.slice(1);\n                this.addErrorAlert(`Error on field \"${fieldName}\"`);\n              }\n            } else if (\n              httpErrorResponse.error !== \"\" &&\n              httpErrorResponse.error.message\n            ) {\n              this.addErrorAlert(\n                httpErrorResponse.error.detail ??\n                  httpErrorResponse.error.message\n              );\n            } else {\n              this.addErrorAlert(httpErrorResponse.error);\n            }\n            break;\n          }\n\n          case 404:\n            this.addErrorAlert(\"Not found\");\n            break;\n\n          default:\n            if (\n              httpErrorResponse.error !== \"\" &&\n              httpErrorResponse.error.message\n            ) {\n              this.addErrorAlert(\n                httpErrorResponse.error.detail ??\n                  httpErrorResponse.error.message\n              );\n            } else {\n              this.addErrorAlert(httpErrorResponse.error);\n            }\n        }\n      }\n    );\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { \"jhi-toast\": Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n\n  private addErrorAlert(message?: string): void {\n    this.alertService.addAlert({ type: \"danger\", message }, this.alerts);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert\n      *ngIf=\"alert.message\"\n      [type]=\"alert.type\"\n      (closed)=\"close(alert)\"\n    >\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n"
        },
        {
            "name": "CategoryComponent",
            "id": "component-CategoryComponent-f301a632f49b850b76eef0af5cf5cab49ddb9aa5490a4511c3a56e70700e3abf0a904b1d99b21bd2d97644c6251e9f507a2fe51bfaf8de03be26a79839ea063e",
            "file": "src/app/entities/category/list/category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-category",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICategory[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackId",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { ICategory } from \"../category.model\";\nimport { CategoryService } from \"../service/category.service\";\nimport { CategoryDeleteDialogComponent } from \"../delete/category-delete-dialog.component\";\n\n@Component({\n  selector: \"jhi-category\",\n  templateUrl: \"./category.component.html\",\n})\nexport class CategoryComponent implements OnInit {\n  categories?: ICategory[];\n  isLoading = false;\n\n  constructor(\n    protected categoryService: CategoryService,\n    protected modalService: NgbModal\n  ) {}\n\n  loadAll(): void {\n    this.isLoading = true;\n\n    this.categoryService.query().subscribe({\n      next: (res: HttpResponse<ICategory[]>) => {\n        this.isLoading = false;\n        this.categories = res.body ?? [];\n      },\n      error: () => {\n        this.isLoading = false;\n      },\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadAll();\n  }\n\n  trackId(_index: number, item: ICategory): number {\n    return item.id!;\n  }\n\n  delete(category: ICategory): void {\n    const modalRef = this.modalService.open(CategoryDeleteDialogComponent, {\n      size: \"lg\",\n      backdrop: \"static\",\n    });\n    modalRef.componentInstance.category = category;\n    // unsubscribe not needed because closed completes on modal close\n    modalRef.closed.subscribe((reason) => {\n      if (reason === \"deleted\") {\n        this.loadAll();\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <h2 id=\"page-heading\" data-cy=\"CategoryHeading\">\n    <span>Categories</span>\n\n    <div class=\"d-flex justify-content-end\">\n      <button\n        class=\"btn btn-info me-2\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\n        <span>Refresh List</span>\n      </button>\n\n      <button\n        id=\"jh-create-entity\"\n        data-cy=\"entityCreateButton\"\n        class=\"btn btn-primary jh-create-entity create-category\"\n        [routerLink]=\"['/category/new']\"\n      >\n        <fa-icon icon=\"plus\"></fa-icon>\n        <span> Create a new Category </span>\n      </button>\n    </div>\n  </h2>\n\n  <jhi-alert-error></jhi-alert-error>\n\n  <jhi-alert></jhi-alert>\n\n  <div\n    class=\"alert alert-warning\"\n    id=\"no-result\"\n    *ngIf=\"categories?.length === 0\"\n  >\n    <span>No categories found</span>\n  </div>\n\n  <div\n    class=\"table-responsive\"\n    id=\"entities\"\n    *ngIf=\"categories && categories.length > 0\"\n  >\n    <table class=\"table table-striped\" aria-describedby=\"page-heading\">\n      <thead>\n        <tr>\n          <th scope=\"col\"><span>ID</span></th>\n          <th scope=\"col\"><span>Name</span></th>\n          <th scope=\"col\"><span>Created</span></th>\n          <th scope=\"col\"><span>Contact</span></th>\n          <th scope=\"col\"><span>User</span></th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          *ngFor=\"let category of categories; trackBy: trackId\"\n          data-cy=\"entityTable\"\n        >\n          <td>\n            <a [routerLink]=\"['/category', category.id, 'view']\">{{\n              category.id\n            }}</a>\n          </td>\n          <td>{{ category.name }}</td>\n          <td>{{ category.created }}</td>\n          <td>\n            <span *ngFor=\"let contact of category.contacts; let last = last\">\n              <a\n                class=\"form-control-static\"\n                [routerLink]=\"['/contact', contact.id, 'view']\"\n                >{{ contact.id }}</a\n              >{{ last ? \"\" : \", \" }}\n            </span>\n          </td>\n          <td>\n            {{ category.user?.login }}\n          </td>\n          <td class=\"text-end\">\n            <div class=\"btn-group\">\n              <button\n                type=\"submit\"\n                [routerLink]=\"['/category', category.id, 'view']\"\n                class=\"btn btn-info btn-sm\"\n                data-cy=\"entityDetailsButton\"\n              >\n                <fa-icon icon=\"eye\"></fa-icon>\n                <span class=\"d-none d-md-inline\">View</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                [routerLink]=\"['/category', category.id, 'edit']\"\n                class=\"btn btn-primary btn-sm\"\n                data-cy=\"entityEditButton\"\n              >\n                <fa-icon icon=\"pencil-alt\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Edit</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                (click)=\"delete(category)\"\n                class=\"btn btn-danger btn-sm\"\n                data-cy=\"entityDeleteButton\"\n              >\n                <fa-icon icon=\"times\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Delete</span>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
        },
        {
            "name": "CategoryDeleteDialogComponent",
            "id": "component-CategoryDeleteDialogComponent-5e20c0ae279ad65f93dcef967ebf3747aaa84b0b3022bf5897700184117cc1a9021d97314cb2f54dad898c1200cf898f90e5fed4f5cd0a0f925676c4e1c5f360",
            "file": "src/app/entities/category/delete/category-delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category-delete-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICategory",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { NgbActiveModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { ICategory } from \"../category.model\";\nimport { CategoryService } from \"../service/category.service\";\n\n@Component({\n  templateUrl: \"./category-delete-dialog.component.html\",\n})\nexport class CategoryDeleteDialogComponent {\n  category?: ICategory;\n\n  constructor(\n    protected categoryService: CategoryService,\n    protected activeModal: NgbActiveModal\n  ) {}\n\n  cancel(): void {\n    this.activeModal.dismiss();\n  }\n\n  confirmDelete(id: number): void {\n    this.categoryService.delete(id).subscribe(() => {\n      this.activeModal.close(\"deleted\");\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form\n  *ngIf=\"category\"\n  name=\"deleteForm\"\n  (ngSubmit)=\"confirmDelete(category.id!)\"\n>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" data-cy=\"categoryDeleteDialogHeading\">\n      Confirm delete operation\n    </h4>\n\n    <button\n      type=\"button\"\n      class=\"btn-close\"\n      data-dismiss=\"modal\"\n      aria-hidden=\"true\"\n      (click)=\"cancel()\"\n    >\n      &times;\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <jhi-alert-error></jhi-alert-error>\n\n    <p id=\"jhi-delete-category-heading\">\n      Are you sure you want to delete this Category?\n    </p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary\"\n      data-dismiss=\"modal\"\n      (click)=\"cancel()\"\n    >\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n    </button>\n\n    <button\n      id=\"jhi-confirm-delete-category\"\n      data-cy=\"entityConfirmDeleteButton\"\n      type=\"submit\"\n      class=\"btn btn-danger\"\n    >\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span>Delete</span>\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "CategoryDetailComponent",
            "id": "component-CategoryDetailComponent-4bd4e18f604d1301fa6028847fa48f73e3c5bf74e927564f9d9d4c836ebd7c2c24ea30617b23ff76b0091c135d5064fb22af3f66ea27b28ee28f4a818d204be9",
            "file": "src/app/entities/category/detail/category-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-category-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICategory | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { ICategory } from \"../category.model\";\n\n@Component({\n  selector: \"jhi-category-detail\",\n  templateUrl: \"./category-detail.component.html\",\n})\nexport class CategoryDetailComponent implements OnInit {\n  category: ICategory | null = null;\n\n  constructor(protected activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ category }) => {\n      this.category = category;\n    });\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"category\">\n      <h2 data-cy=\"categoryDetailsHeading\"><span>Category</span></h2>\n\n      <hr />\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <jhi-alert></jhi-alert>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span>ID</span></dt>\n        <dd>\n          <span>{{ category.id }}</span>\n        </dd>\n        <dt><span>Name</span></dt>\n        <dd>\n          <span>{{ category.name }}</span>\n        </dd>\n        <dt><span>Created</span></dt>\n        <dd>\n          <span>{{ category.created | formatMediumDate }}</span>\n        </dd>\n        <dt><span>Contact</span></dt>\n        <dd>\n          <span *ngFor=\"let contact of category.contacts; let last = last\">\n            <a [routerLink]=\"['/contact', contact?.id, 'view']\">{{\n              contact.id\n            }}</a\n            >{{ last ? \"\" : \", \" }}\n          </span>\n        </dd>\n        <dt><span>User</span></dt>\n        <dd>\n          <span>{{ category.user?.login }}</span>\n        </dd>\n      </dl>\n\n      <button\n        type=\"submit\"\n        (click)=\"previousState()\"\n        class=\"btn btn-info\"\n        data-cy=\"entityDetailsBackButton\"\n      >\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span>\n      </button>\n\n      <button\n        type=\"button\"\n        [routerLink]=\"['/category', category.id, 'edit']\"\n        class=\"btn btn-primary\"\n      >\n        <fa-icon icon=\"pencil-alt\"></fa-icon>&nbsp;<span>Edit</span>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CategoryUpdateComponent",
            "id": "component-CategoryUpdateComponent-32a8d18230caa493550ad9f891af5a5cfadf5593642f2c96bd0a03f24344f30dd0d3230352adb24c4eced42dc363c46dd982af423c29741b7664897abfa15679",
            "file": "src/app/entities/category/update/category-update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-category-update",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./category-update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contactsSharedCollection",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "editForm",
                    "defaultValue": "this.fb.group({\n    id: [],\n    name: [null, [Validators.required]],\n    created: [],\n    contacts: [],\n    user: [],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "usersSharedCollection",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "ICategory",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getSelectedContact",
                    "args": [
                        {
                            "name": "option",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedVals",
                            "type": "IContact[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IContact",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedVals",
                            "type": "IContact[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRelationshipsOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSaveFinalize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSaveSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "previousState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToSaveResponse",
                    "args": [
                        {
                            "name": "result",
                            "type": "Observable<HttpResponse<ICategory>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Observable<HttpResponse<ICategory>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackContactById",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackUserById",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateForm",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { finalize, map } from \"rxjs/operators\";\n\nimport { ICategory, Category } from \"../category.model\";\nimport { CategoryService } from \"../service/category.service\";\nimport { IContact } from \"app/entities/contact/contact.model\";\nimport { ContactService } from \"app/entities/contact/service/contact.service\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { UserService } from \"app/entities/user/user.service\";\n\n@Component({\n  selector: \"jhi-category-update\",\n  templateUrl: \"./category-update.component.html\",\n})\nexport class CategoryUpdateComponent implements OnInit {\n  isSaving = false;\n\n  contactsSharedCollection: IContact[] = [];\n  usersSharedCollection: IUser[] = [];\n\n  editForm = this.fb.group({\n    id: [],\n    name: [null, [Validators.required]],\n    created: [],\n    contacts: [],\n    user: [],\n  });\n\n  constructor(\n    protected categoryService: CategoryService,\n    protected contactService: ContactService,\n    protected userService: UserService,\n    protected activatedRoute: ActivatedRoute,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ category }) => {\n      this.updateForm(category);\n\n      this.loadRelationshipsOptions();\n    });\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    const category = this.createFromForm();\n    if (category.id !== undefined) {\n      this.subscribeToSaveResponse(this.categoryService.update(category));\n    } else {\n      this.subscribeToSaveResponse(this.categoryService.create(category));\n    }\n  }\n\n  trackContactById(_index: number, item: IContact): number {\n    return item.id!;\n  }\n\n  trackUserById(_index: number, item: IUser): string {\n    return item.id!;\n  }\n\n  getSelectedContact(option: IContact, selectedVals?: IContact[]): IContact {\n    if (selectedVals) {\n      for (const selectedVal of selectedVals) {\n        if (option.id === selectedVal.id) {\n          return selectedVal;\n        }\n      }\n    }\n    return option;\n  }\n\n  protected subscribeToSaveResponse(\n    result: Observable<HttpResponse<ICategory>>\n  ): void {\n    result.pipe(finalize(() => this.onSaveFinalize())).subscribe({\n      next: () => this.onSaveSuccess(),\n      error: () => this.onSaveError(),\n    });\n  }\n\n  protected onSaveSuccess(): void {\n    this.previousState();\n  }\n\n  protected onSaveError(): void {\n    // Api for inheritance.\n  }\n\n  protected onSaveFinalize(): void {\n    this.isSaving = false;\n  }\n\n  protected updateForm(category: ICategory): void {\n    this.editForm.patchValue({\n      id: category.id,\n      name: category.name,\n      created: category.created,\n      contacts: category.contacts,\n      user: category.user,\n    });\n\n    this.contactsSharedCollection =\n      this.contactService.addContactToCollectionIfMissing(\n        this.contactsSharedCollection,\n        ...(category.contacts ?? [])\n      );\n    this.usersSharedCollection = this.userService.addUserToCollectionIfMissing(\n      this.usersSharedCollection,\n      category.user\n    );\n  }\n\n  protected loadRelationshipsOptions(): void {\n    this.contactService\n      .query()\n      .pipe(map((res: HttpResponse<IContact[]>) => res.body ?? []))\n      .pipe(\n        map((contacts: IContact[]) =>\n          this.contactService.addContactToCollectionIfMissing(\n            contacts,\n            ...(this.editForm.get(\"contacts\")!.value ?? [])\n          )\n        )\n      )\n      .subscribe(\n        (contacts: IContact[]) => (this.contactsSharedCollection = contacts)\n      );\n\n    this.userService\n      .query()\n      .pipe(map((res: HttpResponse<IUser[]>) => res.body ?? []))\n      .pipe(\n        map((users: IUser[]) =>\n          this.userService.addUserToCollectionIfMissing(\n            users,\n            this.editForm.get(\"user\")!.value\n          )\n        )\n      )\n      .subscribe((users: IUser[]) => (this.usersSharedCollection = users));\n  }\n\n  protected createFromForm(): ICategory {\n    return {\n      ...new Category(),\n      id: this.editForm.get([\"id\"])!.value,\n      name: this.editForm.get([\"name\"])!.value,\n      created: this.editForm.get([\"created\"])!.value,\n      contacts: this.editForm.get([\"contacts\"])!.value,\n      user: this.editForm.get([\"user\"])!.value,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <form\n      name=\"editForm\"\n      role=\"form\"\n      novalidate\n      (ngSubmit)=\"save()\"\n      [formGroup]=\"editForm\"\n    >\n      <h2 id=\"jhi-category-heading\" data-cy=\"CategoryCreateUpdateHeading\">\n        Create or edit a Category\n      </h2>\n\n      <div>\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"row mb-3\" [hidden]=\"editForm.get('id')!.value == null\">\n          <label class=\"form-label\" for=\"field_id\">ID</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"id\"\n            id=\"field_id\"\n            data-cy=\"id\"\n            formControlName=\"id\"\n            [readonly]=\"true\"\n          />\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_name\">Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"name\"\n            id=\"field_name\"\n            data-cy=\"name\"\n            formControlName=\"name\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('name')!.invalid &&\n              (editForm.get('name')!.dirty || editForm.get('name')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('name')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_created\">Created</label>\n          <div class=\"input-group\">\n            <input\n              id=\"field_created\"\n              data-cy=\"created\"\n              type=\"text\"\n              class=\"form-control\"\n              name=\"created\"\n              ngbDatepicker\n              #createdDp=\"ngbDatepicker\"\n              formControlName=\"created\"\n            />\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              (click)=\"createdDp.toggle()\"\n            >\n              <fa-icon icon=\"calendar-alt\"></fa-icon>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label for=\"field_contacts\">Contact</label>\n          <select\n            class=\"form-control\"\n            id=\"field_contacts\"\n            data-cy=\"contact\"\n            multiple\n            name=\"contacts\"\n            formControlName=\"contacts\"\n          >\n            <option\n              [ngValue]=\"\n                getSelectedContact(\n                  contactOption,\n                  editForm.get('contacts')!.value\n                )\n              \"\n              *ngFor=\"\n                let contactOption of contactsSharedCollection;\n                trackBy: trackContactById\n              \"\n            >\n              {{ contactOption.id }}\n            </option>\n          </select>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_user\">User</label>\n          <select\n            class=\"form-control\"\n            id=\"field_user\"\n            data-cy=\"user\"\n            name=\"user\"\n            formControlName=\"user\"\n          >\n            <option [ngValue]=\"null\"></option>\n            <option\n              [ngValue]=\"\n                userOption.id === editForm.get('user')!.value?.id\n                  ? editForm.get('user')!.value\n                  : userOption\n              \"\n              *ngFor=\"\n                let userOption of usersSharedCollection;\n                trackBy: trackUserById\n              \"\n            >\n              {{ userOption.login }}\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div>\n        <button\n          type=\"button\"\n          id=\"cancel-save\"\n          data-cy=\"entityCreateCancelButton\"\n          class=\"btn btn-secondary\"\n          (click)=\"previousState()\"\n        >\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n        </button>\n\n        <button\n          type=\"submit\"\n          id=\"save-entity\"\n          data-cy=\"entityCreateSaveButton\"\n          [disabled]=\"editForm.invalid || isSaving\"\n          class=\"btn btn-primary\"\n        >\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-426126a92d197b27063b15632a5835de61829f1d64ce12441a8dc7c6ad8c7913b6aaafd0fab52e3b74d1b5d36339a0ab4ef1487f7d512bc89d35b78215856f0e",
            "file": "src/app/entities/contact/list/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-contact",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contacts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "byteSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFile",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackId",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { IContact } from \"../contact.model\";\nimport { ContactService } from \"../service/contact.service\";\nimport { ContactDeleteDialogComponent } from \"../delete/contact-delete-dialog.component\";\nimport { DataUtils } from \"app/core/util/data-util.service\";\n\n@Component({\n  selector: \"jhi-contact\",\n  templateUrl: \"./contact.component.html\",\n})\nexport class ContactComponent implements OnInit {\n  contacts?: IContact[];\n  isLoading = false;\n\n  constructor(\n    protected contactService: ContactService,\n    protected dataUtils: DataUtils,\n    protected modalService: NgbModal\n  ) {}\n\n  loadAll(): void {\n    this.isLoading = true;\n\n    this.contactService.query().subscribe({\n      next: (res: HttpResponse<IContact[]>) => {\n        this.isLoading = false;\n        this.contacts = res.body ?? [];\n      },\n      error: () => {\n        this.isLoading = false;\n      },\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadAll();\n  }\n\n  trackId(_index: number, item: IContact): number {\n    return item.id!;\n  }\n\n  byteSize(base64String: string): string {\n    return this.dataUtils.byteSize(base64String);\n  }\n\n  openFile(base64String: string, contentType: string | null | undefined): void {\n    return this.dataUtils.openFile(base64String, contentType);\n  }\n\n  delete(contact: IContact): void {\n    const modalRef = this.modalService.open(ContactDeleteDialogComponent, {\n      size: \"lg\",\n      backdrop: \"static\",\n    });\n    modalRef.componentInstance.contact = contact;\n    // unsubscribe not needed because closed completes on modal close\n    modalRef.closed.subscribe((reason) => {\n      if (reason === \"deleted\") {\n        this.loadAll();\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <h2 id=\"page-heading\" data-cy=\"ContactHeading\">\n    <span>Contacts</span>\n\n    <div class=\"d-flex justify-content-end\">\n      <button\n        class=\"btn btn-info me-2\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\n        <span>Refresh List</span>\n      </button>\n\n      <button\n        id=\"jh-create-entity\"\n        data-cy=\"entityCreateButton\"\n        class=\"btn btn-primary jh-create-entity create-contact\"\n        [routerLink]=\"['/contact/new']\"\n      >\n        <fa-icon icon=\"plus\"></fa-icon>\n        <span> Create a new Contact </span>\n      </button>\n    </div>\n  </h2>\n\n  <jhi-alert-error></jhi-alert-error>\n\n  <jhi-alert></jhi-alert>\n\n  <div\n    class=\"alert alert-warning\"\n    id=\"no-result\"\n    *ngIf=\"contacts?.length === 0\"\n  >\n    <span>No contacts found</span>\n  </div>\n\n  <div\n    class=\"table-responsive\"\n    id=\"entities\"\n    *ngIf=\"contacts && contacts.length > 0\"\n  >\n    <table class=\"table table-striped\" aria-describedby=\"page-heading\">\n      <thead>\n        <tr>\n          <th scope=\"col\"><span>ID</span></th>\n          <th scope=\"col\"><span>First Name</span></th>\n          <th scope=\"col\"><span>Last Name</span></th>\n          <th scope=\"col\"><span>Address 1</span></th>\n          <th scope=\"col\"><span>Address 2</span></th>\n          <th scope=\"col\"><span>City</span></th>\n          <th scope=\"col\"><span>State</span></th>\n          <th scope=\"col\"><span>Zip Code</span></th>\n          <th scope=\"col\"><span>Email</span></th>\n          <th scope=\"col\"><span>Phone Number</span></th>\n          <th scope=\"col\"><span>Birth Date</span></th>\n          <th scope=\"col\"><span>Created</span></th>\n          <th scope=\"col\"><span>Image Data</span></th>\n          <th scope=\"col\"><span>Image Type</span></th>\n          <th scope=\"col\"><span>User</span></th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          *ngFor=\"let contact of contacts; trackBy: trackId\"\n          data-cy=\"entityTable\"\n        >\n          <td>\n            <a [routerLink]=\"['/contact', contact.id, 'view']\">{{\n              contact.id\n            }}</a>\n          </td>\n          <td>{{ contact.firstName }}</td>\n          <td>{{ contact.lastName }}</td>\n          <td>{{ contact.address1 }}</td>\n          <td>{{ contact.address2 }}</td>\n          <td>{{ contact.city }}</td>\n          <td>{{ contact.state }}</td>\n          <td>{{ contact.zipCode }}</td>\n          <td>{{ contact.email }}</td>\n          <td>{{ contact.phoneNumber }}</td>\n          <td>{{ contact.birthDate | formatMediumDate }}</td>\n          <td>{{ contact.created | formatMediumDate }}</td>\n          <td>\n            <a\n              *ngIf=\"contact.imageData\"\n              (click)=\"\n                openFile(contact.imageData, contact.imageDataContentType)\n              \"\n            >\n              <img\n                [src]=\"\n                  'data:' +\n                  contact.imageDataContentType +\n                  ';base64,' +\n                  contact.imageData\n                \"\n                style=\"max-height: 30px\"\n                alt=\"contact image\"\n              />\n            </a>\n            <span *ngIf=\"contact.imageData\"\n              >{{ contact.imageDataContentType }},\n              {{ byteSize(contact.imageData) }}</span\n            >\n          </td>\n          <td>{{ contact.imageType }}</td>\n          <td>\n            {{ contact.user?.login }}\n          </td>\n          <td class=\"text-end\">\n            <div class=\"btn-group\">\n              <button\n                type=\"submit\"\n                [routerLink]=\"['/contact', contact.id, 'view']\"\n                class=\"btn btn-info btn-sm\"\n                data-cy=\"entityDetailsButton\"\n              >\n                <fa-icon icon=\"eye\"></fa-icon>\n                <span class=\"d-none d-md-inline\">View</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                [routerLink]=\"['/contact', contact.id, 'edit']\"\n                class=\"btn btn-primary btn-sm\"\n                data-cy=\"entityEditButton\"\n              >\n                <fa-icon icon=\"pencil-alt\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Edit</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                (click)=\"delete(contact)\"\n                class=\"btn btn-danger btn-sm\"\n                data-cy=\"entityDeleteButton\"\n              >\n                <fa-icon icon=\"times\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Delete</span>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
        },
        {
            "name": "ContactDeleteDialogComponent",
            "id": "component-ContactDeleteDialogComponent-27317f055fa2fad1ac31b63efeae76894d2409a6065a9ea9019ea63211a9ea839d62fbbd8eac0bbd2ac7d4bf9922b248a4678132c4388a4905485a1382a61484",
            "file": "src/app/entities/contact/delete/contact-delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact-delete-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { NgbActiveModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { IContact } from \"../contact.model\";\nimport { ContactService } from \"../service/contact.service\";\n\n@Component({\n  templateUrl: \"./contact-delete-dialog.component.html\",\n})\nexport class ContactDeleteDialogComponent {\n  contact?: IContact;\n\n  constructor(\n    protected contactService: ContactService,\n    protected activeModal: NgbActiveModal\n  ) {}\n\n  cancel(): void {\n    this.activeModal.dismiss();\n  }\n\n  confirmDelete(id: number): void {\n    this.contactService.delete(id).subscribe(() => {\n      this.activeModal.close(\"deleted\");\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form *ngIf=\"contact\" name=\"deleteForm\" (ngSubmit)=\"confirmDelete(contact.id!)\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\" data-cy=\"contactDeleteDialogHeading\">\n      Confirm delete operation\n    </h4>\n\n    <button\n      type=\"button\"\n      class=\"btn-close\"\n      data-dismiss=\"modal\"\n      aria-hidden=\"true\"\n      (click)=\"cancel()\"\n    >\n      &times;\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <jhi-alert-error></jhi-alert-error>\n\n    <p id=\"jhi-delete-contact-heading\">\n      Are you sure you want to delete this Contact?\n    </p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary\"\n      data-dismiss=\"modal\"\n      (click)=\"cancel()\"\n    >\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n    </button>\n\n    <button\n      id=\"jhi-confirm-delete-contact\"\n      data-cy=\"entityConfirmDeleteButton\"\n      type=\"submit\"\n      class=\"btn btn-danger\"\n    >\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span>Delete</span>\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "ContactDetailComponent",
            "id": "component-ContactDetailComponent-a09a24547e0fbdd6f77b33ae8811c40568de48d7d895fd9e251e2e2f7f425d3237b3b58a43d33b7fb07d04facc9e6021edfbae1cac9363922e3da4fdd3ab5212",
            "file": "src/app/entities/contact/detail/contact-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-contact-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "byteSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFile",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { IContact } from \"../contact.model\";\nimport { DataUtils } from \"app/core/util/data-util.service\";\n\n@Component({\n  selector: \"jhi-contact-detail\",\n  templateUrl: \"./contact-detail.component.html\",\n})\nexport class ContactDetailComponent implements OnInit {\n  contact: IContact | null = null;\n\n  constructor(\n    protected dataUtils: DataUtils,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ contact }) => {\n      this.contact = contact;\n    });\n  }\n\n  byteSize(base64String: string): string {\n    return this.dataUtils.byteSize(base64String);\n  }\n\n  openFile(base64String: string, contentType: string | null | undefined): void {\n    this.dataUtils.openFile(base64String, contentType);\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"contact\">\n      <h2 data-cy=\"contactDetailsHeading\"><span>Contact</span></h2>\n\n      <hr />\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <jhi-alert></jhi-alert>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span>ID</span></dt>\n        <dd>\n          <span>{{ contact.id }}</span>\n        </dd>\n        <dt><span>First Name</span></dt>\n        <dd>\n          <span>{{ contact.firstName }}</span>\n        </dd>\n        <dt><span>Last Name</span></dt>\n        <dd>\n          <span>{{ contact.lastName }}</span>\n        </dd>\n        <dt><span>Address 1</span></dt>\n        <dd>\n          <span>{{ contact.address1 }}</span>\n        </dd>\n        <dt><span>Address 2</span></dt>\n        <dd>\n          <span>{{ contact.address2 }}</span>\n        </dd>\n        <dt><span>City</span></dt>\n        <dd>\n          <span>{{ contact.city }}</span>\n        </dd>\n        <dt><span>State</span></dt>\n        <dd>\n          <span>{{ contact.state }}</span>\n        </dd>\n        <dt><span>Zip Code</span></dt>\n        <dd>\n          <span>{{ contact.zipCode }}</span>\n        </dd>\n        <dt><span>Email</span></dt>\n        <dd>\n          <span>{{ contact.email }}</span>\n        </dd>\n        <dt><span>Phone Number</span></dt>\n        <dd>\n          <span>{{ contact.phoneNumber }}</span>\n        </dd>\n        <dt><span>Birth Date</span></dt>\n        <dd>\n          <span>{{ contact.birthDate | formatMediumDate }}</span>\n        </dd>\n        <dt><span>Created</span></dt>\n        <dd>\n          <span>{{ contact.created | formatMediumDate }}</span>\n        </dd>\n        <dt><span>Image Data</span></dt>\n        <dd>\n          <div *ngIf=\"contact.imageData\">\n            <a\n              (click)=\"\n                openFile(contact.imageData, contact.imageDataContentType)\n              \"\n            >\n              <img\n                [src]=\"\n                  'data:' +\n                  contact.imageDataContentType +\n                  ';base64,' +\n                  contact.imageData\n                \"\n                style=\"max-width: 100%\"\n                alt=\"contact image\"\n              />\n            </a>\n            {{ contact.imageDataContentType }},\n            {{ byteSize(contact.imageData) }}\n          </div>\n        </dd>\n        <dt><span>Image Type</span></dt>\n        <dd>\n          <span>{{ contact.imageType }}</span>\n        </dd>\n        <dt><span>User</span></dt>\n        <dd>\n          <span>{{ contact.user?.login }}</span>\n        </dd>\n      </dl>\n\n      <button\n        type=\"submit\"\n        (click)=\"previousState()\"\n        class=\"btn btn-info\"\n        data-cy=\"entityDetailsBackButton\"\n      >\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span>\n      </button>\n\n      <button\n        type=\"button\"\n        [routerLink]=\"['/contact', contact.id, 'edit']\"\n        class=\"btn btn-primary\"\n      >\n        <fa-icon icon=\"pencil-alt\"></fa-icon>&nbsp;<span>Edit</span>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ContactUpdateComponent",
            "id": "component-ContactUpdateComponent-c52f5cdf797b559b19a679cfeb77e50d7a17d95ab1537254016f84092906ec23329457508022fea26e15370287cbada15203122dda1e94a6ccefa75d74bd6148",
            "file": "src/app/entities/contact/update/contact-update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-contact-update",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact-update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editForm",
                    "defaultValue": "this.fb.group({\n    id: [],\n    firstName: [null, [Validators.required]],\n    lastName: [null, [Validators.required]],\n    address1: [null, [Validators.required]],\n    address2: [],\n    city: [null, [Validators.required]],\n    state: [null, [Validators.required]],\n    zipCode: [null, [Validators.required]],\n    email: [null, [Validators.required]],\n    phoneNumber: [null, [Validators.required]],\n    birthDate: [],\n    created: [],\n    imageData: [],\n    imageDataContentType: [],\n    imageType: [],\n    user: [],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "statesValues",
                    "defaultValue": "Object.keys(States)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "usersSharedCollection",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "byteSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearInputImage",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldContentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldContentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "IContact",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loadRelationshipsOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSaveFinalize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSaveSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "openFile",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFileData",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isImage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isImage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToSaveResponse",
                    "args": [
                        {
                            "name": "result",
                            "type": "Observable<HttpResponse<IContact>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Observable<HttpResponse<IContact>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackUserById",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateForm",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ElementRef } from \"@angular/core\";\nimport { HttpResponse } from \"@angular/common/http\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { finalize, map } from \"rxjs/operators\";\n\nimport { IContact, Contact } from \"../contact.model\";\nimport { ContactService } from \"../service/contact.service\";\nimport { AlertError } from \"app/shared/alert/alert-error.model\";\nimport {\n  EventManager,\n  EventWithContent,\n} from \"app/core/util/event-manager.service\";\nimport { DataUtils, FileLoadError } from \"app/core/util/data-util.service\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { UserService } from \"app/entities/user/user.service\";\nimport { States } from \"app/entities/enumerations/states.model\";\n\n@Component({\n  selector: \"jhi-contact-update\",\n  templateUrl: \"./contact-update.component.html\",\n})\nexport class ContactUpdateComponent implements OnInit {\n  isSaving = false;\n  statesValues = Object.keys(States);\n\n  usersSharedCollection: IUser[] = [];\n\n  editForm = this.fb.group({\n    id: [],\n    firstName: [null, [Validators.required]],\n    lastName: [null, [Validators.required]],\n    address1: [null, [Validators.required]],\n    address2: [],\n    city: [null, [Validators.required]],\n    state: [null, [Validators.required]],\n    zipCode: [null, [Validators.required]],\n    email: [null, [Validators.required]],\n    phoneNumber: [null, [Validators.required]],\n    birthDate: [],\n    created: [],\n    imageData: [],\n    imageDataContentType: [],\n    imageType: [],\n    user: [],\n  });\n\n  constructor(\n    protected dataUtils: DataUtils,\n    protected eventManager: EventManager,\n    protected contactService: ContactService,\n    protected userService: UserService,\n    protected elementRef: ElementRef,\n    protected activatedRoute: ActivatedRoute,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(({ contact }) => {\n      this.updateForm(contact);\n\n      this.loadRelationshipsOptions();\n    });\n  }\n\n  byteSize(base64String: string): string {\n    return this.dataUtils.byteSize(base64String);\n  }\n\n  openFile(base64String: string, contentType: string | null | undefined): void {\n    this.dataUtils.openFile(base64String, contentType);\n  }\n\n  setFileData(event: Event, field: string, isImage: boolean): void {\n    this.dataUtils\n      .loadFileToForm(event, this.editForm, field, isImage)\n      .subscribe({\n        error: (err: FileLoadError) =>\n          this.eventManager.broadcast(\n            new EventWithContent<AlertError>(\"contactProApp.error\", {\n              message: err.message,\n            })\n          ),\n      });\n  }\n\n  clearInputImage(\n    field: string,\n    fieldContentType: string,\n    idInput: string\n  ): void {\n    this.editForm.patchValue({\n      [field]: null,\n      [fieldContentType]: null,\n    });\n    if (idInput && this.elementRef.nativeElement.querySelector(\"#\" + idInput)) {\n      this.elementRef.nativeElement.querySelector(\"#\" + idInput).value = null;\n    }\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    const contact = this.createFromForm();\n    if (contact.id !== undefined) {\n      this.subscribeToSaveResponse(this.contactService.update(contact));\n    } else {\n      this.subscribeToSaveResponse(this.contactService.create(contact));\n    }\n  }\n\n  trackUserById(_index: number, item: IUser): string {\n    return item.id!;\n  }\n\n  protected subscribeToSaveResponse(\n    result: Observable<HttpResponse<IContact>>\n  ): void {\n    result.pipe(finalize(() => this.onSaveFinalize())).subscribe({\n      next: () => this.onSaveSuccess(),\n      error: () => this.onSaveError(),\n    });\n  }\n\n  protected onSaveSuccess(): void {\n    this.previousState();\n  }\n\n  protected onSaveError(): void {\n    // Api for inheritance.\n  }\n\n  protected onSaveFinalize(): void {\n    this.isSaving = false;\n  }\n\n  protected updateForm(contact: IContact): void {\n    this.editForm.patchValue({\n      id: contact.id,\n      firstName: contact.firstName,\n      lastName: contact.lastName,\n      address1: contact.address1,\n      address2: contact.address2,\n      city: contact.city,\n      state: contact.state,\n      zipCode: contact.zipCode,\n      email: contact.email,\n      phoneNumber: contact.phoneNumber,\n      birthDate: contact.birthDate,\n      created: contact.created,\n      imageData: contact.imageData,\n      imageDataContentType: contact.imageDataContentType,\n      imageType: contact.imageType,\n      user: contact.user,\n    });\n\n    this.usersSharedCollection = this.userService.addUserToCollectionIfMissing(\n      this.usersSharedCollection,\n      contact.user\n    );\n  }\n\n  protected loadRelationshipsOptions(): void {\n    this.userService\n      .query()\n      .pipe(map((res: HttpResponse<IUser[]>) => res.body ?? []))\n      .pipe(\n        map((users: IUser[]) =>\n          this.userService.addUserToCollectionIfMissing(\n            users,\n            this.editForm.get(\"user\")!.value\n          )\n        )\n      )\n      .subscribe((users: IUser[]) => (this.usersSharedCollection = users));\n  }\n\n  protected createFromForm(): IContact {\n    return {\n      ...new Contact(),\n      id: this.editForm.get([\"id\"])!.value,\n      firstName: this.editForm.get([\"firstName\"])!.value,\n      lastName: this.editForm.get([\"lastName\"])!.value,\n      address1: this.editForm.get([\"address1\"])!.value,\n      address2: this.editForm.get([\"address2\"])!.value,\n      city: this.editForm.get([\"city\"])!.value,\n      state: this.editForm.get([\"state\"])!.value,\n      zipCode: this.editForm.get([\"zipCode\"])!.value,\n      email: this.editForm.get([\"email\"])!.value,\n      phoneNumber: this.editForm.get([\"phoneNumber\"])!.value,\n      birthDate: this.editForm.get([\"birthDate\"])!.value,\n      created: this.editForm.get([\"created\"])!.value,\n      imageDataContentType: this.editForm.get([\"imageDataContentType\"])!.value,\n      imageData: this.editForm.get([\"imageData\"])!.value,\n      imageType: this.editForm.get([\"imageType\"])!.value,\n      user: this.editForm.get([\"user\"])!.value,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "dataUtils",
                        "type": "DataUtils",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contactService",
                        "type": "ContactService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <form\n      name=\"editForm\"\n      role=\"form\"\n      novalidate\n      (ngSubmit)=\"save()\"\n      [formGroup]=\"editForm\"\n    >\n      <h2 id=\"jhi-contact-heading\" data-cy=\"ContactCreateUpdateHeading\">\n        Create or edit a Contact\n      </h2>\n\n      <div>\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"row mb-3\" [hidden]=\"editForm.get('id')!.value == null\">\n          <label class=\"form-label\" for=\"field_id\">ID</label>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            name=\"id\"\n            id=\"field_id\"\n            data-cy=\"id\"\n            formControlName=\"id\"\n            [readonly]=\"true\"\n          />\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_firstName\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"firstName\"\n            id=\"field_firstName\"\n            data-cy=\"firstName\"\n            formControlName=\"firstName\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('firstName')!.invalid &&\n              (editForm.get('firstName')!.dirty ||\n                editForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('firstName')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"lastName\"\n            id=\"field_lastName\"\n            data-cy=\"lastName\"\n            formControlName=\"lastName\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('lastName')!.invalid &&\n              (editForm.get('lastName')!.dirty ||\n                editForm.get('lastName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('lastName')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_address1\">Address 1</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"address1\"\n            id=\"field_address1\"\n            data-cy=\"address1\"\n            formControlName=\"address1\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('address1')!.invalid &&\n              (editForm.get('address1')!.dirty ||\n                editForm.get('address1')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('address1')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_address2\">Address 2</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"address2\"\n            id=\"field_address2\"\n            data-cy=\"address2\"\n            formControlName=\"address2\"\n          />\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_city\">City</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"city\"\n            id=\"field_city\"\n            data-cy=\"city\"\n            formControlName=\"city\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('city')!.invalid &&\n              (editForm.get('city')!.dirty || editForm.get('city')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('city')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_state\">State</label>\n          <select\n            class=\"form-control\"\n            name=\"state\"\n            formControlName=\"state\"\n            id=\"field_state\"\n            data-cy=\"state\"\n          >\n            <option [ngValue]=\"null\"></option>\n            <option *ngFor=\"let states of statesValues\" [value]=\"states\">\n              states\n            </option>\n          </select>\n          <div\n            *ngIf=\"\n              editForm.get('state')!.invalid &&\n              (editForm.get('state')!.dirty || editForm.get('state')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('state')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_zipCode\">Zip Code</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"zipCode\"\n            id=\"field_zipCode\"\n            data-cy=\"zipCode\"\n            formControlName=\"zipCode\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('zipCode')!.invalid &&\n              (editForm.get('zipCode')!.dirty ||\n                editForm.get('zipCode')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('zipCode')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_email\">Email</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"email\"\n            id=\"field_email\"\n            data-cy=\"email\"\n            formControlName=\"email\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('email')!.invalid &&\n              (editForm.get('email')!.dirty || editForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_phoneNumber\">Phone Number</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"phoneNumber\"\n            id=\"field_phoneNumber\"\n            data-cy=\"phoneNumber\"\n            formControlName=\"phoneNumber\"\n          />\n          <div\n            *ngIf=\"\n              editForm.get('phoneNumber')!.invalid &&\n              (editForm.get('phoneNumber')!.dirty ||\n                editForm.get('phoneNumber')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('phoneNumber')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_birthDate\">Birth Date</label>\n          <div class=\"input-group\">\n            <input\n              id=\"field_birthDate\"\n              data-cy=\"birthDate\"\n              type=\"text\"\n              class=\"form-control\"\n              name=\"birthDate\"\n              ngbDatepicker\n              #birthDateDp=\"ngbDatepicker\"\n              formControlName=\"birthDate\"\n            />\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              (click)=\"birthDateDp.toggle()\"\n            >\n              <fa-icon icon=\"calendar-alt\"></fa-icon>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_created\">Created</label>\n          <div class=\"input-group\">\n            <input\n              id=\"field_created\"\n              data-cy=\"created\"\n              type=\"text\"\n              class=\"form-control\"\n              name=\"created\"\n              ngbDatepicker\n              #createdDp=\"ngbDatepicker\"\n              formControlName=\"created\"\n            />\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              (click)=\"createdDp.toggle()\"\n            >\n              <fa-icon icon=\"calendar-alt\"></fa-icon>\n            </button>\n          </div>\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_imageData\">Image Data</label>\n          <div>\n            <img\n              [src]=\"\n                'data:' +\n                editForm.get('imageDataContentType')!.value +\n                ';base64,' +\n                editForm.get('imageData')!.value\n              \"\n              style=\"max-height: 100px\"\n              *ngIf=\"editForm.get('imageData')!.value\"\n              alt=\"contact image\"\n            />\n            <div\n              *ngIf=\"editForm.get('imageData')!.value\"\n              class=\"form-text text-danger clearfix\"\n            >\n              <span class=\"pull-start\"\n                >{{ editForm.get(\"imageDataContentType\")!.value }},\n                {{ byteSize(editForm.get(\"imageData\")!.value) }}</span\n              >\n              <button\n                type=\"button\"\n                (click)=\"\n                  clearInputImage(\n                    'imageData',\n                    'imageDataContentType',\n                    'file_imageData'\n                  )\n                \"\n                class=\"btn btn-secondary btn-xs pull-end\"\n              >\n                <fa-icon icon=\"times\"></fa-icon>\n              </button>\n            </div>\n            <input\n              type=\"file\"\n              id=\"file_imageData\"\n              data-cy=\"imageData\"\n              (change)=\"setFileData($event, 'imageData', true)\"\n              accept=\"image/*\"\n            />\n          </div>\n          <input\n            type=\"hidden\"\n            class=\"form-control\"\n            name=\"imageData\"\n            id=\"field_imageData\"\n            data-cy=\"imageData\"\n            formControlName=\"imageData\"\n          />\n          <input\n            type=\"hidden\"\n            class=\"form-control\"\n            name=\"imageDataContentType\"\n            id=\"field_imageDataContentType\"\n            formControlName=\"imageDataContentType\"\n          />\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_imageType\">Image Type</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"imageType\"\n            id=\"field_imageType\"\n            data-cy=\"imageType\"\n            formControlName=\"imageType\"\n          />\n        </div>\n\n        <div class=\"row mb-3\">\n          <label class=\"form-label\" for=\"field_user\">User</label>\n          <select\n            class=\"form-control\"\n            id=\"field_user\"\n            data-cy=\"user\"\n            name=\"user\"\n            formControlName=\"user\"\n          >\n            <option [ngValue]=\"null\"></option>\n            <option\n              [ngValue]=\"\n                userOption.id === editForm.get('user')!.value?.id\n                  ? editForm.get('user')!.value\n                  : userOption\n              \"\n              *ngFor=\"\n                let userOption of usersSharedCollection;\n                trackBy: trackUserById\n              \"\n            >\n              {{ userOption.login }}\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div>\n        <button\n          type=\"button\"\n          id=\"cancel-save\"\n          data-cy=\"entityCreateCancelButton\"\n          class=\"btn btn-secondary\"\n          (click)=\"previousState()\"\n        >\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n        </button>\n\n        <button\n          type=\"submit\"\n          id=\"save-entity\"\n          data-cy=\"entityCreateSaveButton\"\n          [disabled]=\"editForm.invalid || isSaving\"\n          class=\"btn btn-primary\"\n        >\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "DocsComponent",
            "id": "component-DocsComponent-da225d02d108df78348d288de6adebe16cc146bd521a78d996d2aad99ae8725a7add27000b9521edffbcc32b46f9fb57581aecb274216f4452afc23c59af2516",
            "file": "src/app/admin/docs/docs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-docs",
            "styleUrls": [
                "./docs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./docs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"jhi-docs\",\n  templateUrl: \"./docs.component.html\",\n  styleUrls: [\"./docs.component.scss\"],\n})\nexport class DocsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~bootstrap/scss/functions\";\n@import \"~bootswatch/dist/zephyr/variables\";\n@import \"~bootstrap/scss/variables\";\n\niframe {\n  background: white;\n}\n",
                    "styleUrl": "./docs.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<iframe\n  src=\"swagger-ui/index.html\"\n  width=\"100%\"\n  height=\"900\"\n  seamless\n  target=\"_top\"\n  title=\"Swagger UI\"\n  class=\"border-0\"\n  data-cy=\"swagger-frame\"\n></iframe>\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-2d16a7d669f209e24b863fe93fe9f552d2c26079b878ccf813715136857938bad374b00756a1c3bf1988756d9ed71b8549c85073070b17ac0a83c4a5f7b6592b",
            "file": "src/app/layouts/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n  selector: \"jhi-error\",\n  templateUrl: \"./error.component.html\",\n})\nexport class ErrorComponent implements OnInit {\n  errorMessage?: string;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe((routeData) => {\n      if (routeData.errorMessage) {\n        this.errorMessage = routeData.errorMessage;\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <span class=\"hipster img-fluid rounded\"></span>\n    </div>\n\n    <div class=\"col-md-8\">\n      <h1>Error Page!</h1>\n\n      <div *ngIf=\"errorMessage\">\n        <div class=\"alert alert-danger\">{{ errorMessage }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-4ced848a6d8f3d14ede072a5e9b6255986d9c857f81b1a424017f5346ca27b6e1a38069075116a3bc5a00836cd63eb2e2d6ac0140aab6d25b2f048330e307250",
            "file": "src/app/layouts/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"jhi-footer\",\n  templateUrl: \"./footer.component.html\",\n})\nexport class FooterComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<footer class=\"footer container-fluid\">\n  <div class=\"row align-items-center py-2\">\n      <div class=\"col\">\n          <div class=\"row align-items-center gy-2\">\n              <div class=\"col d-flex justify-content-center justify-content-md-start order-last order-md-first copyright\">\n                  &copy; 2022 Dane Whitman All Rights Reserved</div>\n              <div class=\"col d-flex justify-content-center\">\n                  <img src=\"img/ContactPro.png\" height=\"50\">\n              </div>\n              <div class=\"col-12 col-md d-flex justify-content-center justify-content-md-end\">\n                  <a href=\"#\" class=\"socialicons\"><i class=\"bi bi-linkedin p-2 \"></i></a>\n                  <a href=\"#\" class=\"socialicons\"><i class=\"bi bi-twitter p-2\"></i></a>\n                  <a href=\"#\" class=\"socialicons\"><i class=\"bi bi-youtube p-2\"></i></a>\n                  <a href=\"#\" class=\"socialicons\"><i class=\"bi bi-instagram p-2 \"></i></a>\n              </div>\n          </div>\n      </div>\n  </div>\n</footer>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-c62541bf3c6c202d64634346ee2f35027a3a55c9090a54fb92840c56aaa1a19b92ba5774a5209317ce0660e13bad43f9ff2dab268ae15b68e00e17d9705c0b77",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { Account } from \"app/core/auth/account.model\";\n\n@Component({\n  selector: \"jhi-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.scss\"],\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  account: Account | null = null;\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.accountService\n      .getAuthenticationState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((account) => (this.account = account));\n  }\n\n  login(): void {\n    this.router.navigate([\"/login\"]);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* ==========================================================================\nMain page styles\n========================================================================== */\n\n.hipster {\n  display: inline-block;\n  width: 347px;\n  height: 497px;\n  background: url(\"../../content/images/jhipster_family_member_1.svg\") no-repeat\n    center top;\n  background-size: contain;\n}\n\n/* wait autoprefixer update to allow simple generation of high pixel density media query */\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\n  only screen and (-moz-min-device-pixel-ratio: 2),\n  only screen and (-o-min-device-pixel-ratio: 2/1),\n  only screen and (min-resolution: 192dpi),\n  only screen and (min-resolution: 2dppx) {\n  .hipster {\n    background: url(\"../../content/images/jhipster_family_member_1.svg\")\n      no-repeat center top;\n    background-size: contain;\n  }\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<main class=\"content\" id=\"mainHero\">\n  <section class=\"container-fluid  h-100\">\n    <div class=\"row align-items-center h-100 \">\n      <div class=\"col-12 col-md-6 col-lg-5 order-last order-md-first\">\n        <div class=\"ms-5\">\n          <h1 class=\"heroTitle\">All your <span class=\"texthighlight\">contacts</span> in\n            one place</h1>\n          <div class=\"subtitle\">\n            Organize your events by keeping everyone in the loop. Experience the power of ContactPro\n            demo it today!<br><br><strong>Built with pride using cutting edge tech:</strong>\n            <br><i class=\"devicon-dot-net-plain-wordmark colored icon\"></i>\n            <i class=\"devicon-csharp-plain-wordmark colored icon\"></i>\n            <i class=\"devicon-postgresql-plain-wordmark colored icon\"></i>\n            <i class=\"devicon-bootstrap-plain-wordmark colored icon\"></i>\n            <i class=\"devicon-heroku-plain-wordmark colored icon\"></i>\n          </div>\n          <div class=\"text-start mt-5\">\n            <a class=\"btn btn-lg btn-primary rounded-pill w-25\" routerLink=\"demo\">DEMO</a>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-12 col-md-6 col-lg-7 text-center\">\n        <img src=\"content/img/contactProLanding.png\" class=\"img-fluid\">\n      </div>\n    </div>\n  </section>\n</main>\n\n<!-- <div class=\"row\">\n  <div class=\"col-md-3\">\n    <span class=\"hipster img-fluid rounded\"></span>\n  </div>\n\n  <div class=\"col-md-9\">\n    <h1 class=\"display-4\"><span>Welcome, .Net Hipster!</span> (Contact Pro)</h1>\n\n    <p class=\"lead\">This is your homepage</p>\n\n    <div [ngSwitch]=\"account !== null\">\n      <div class=\"alert alert-success\" *ngSwitchCase=\"true\">\n        <span id=\"home-logged-message\" *ngIf=\"account\"\n          >You are logged in as user \"{{ account.login }}\".</span\n        >\n      </div>\n\n      <div class=\"alert alert-warning\" *ngSwitchCase=\"false\">\n        <span>If you want to </span>\n        <a class=\"alert-link\" (click)=\"login()\">sign in</a\n        ><span\n          >, you can try the default accounts:<br />- Administrator\n          (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n\n      <div class=\"alert alert-warning\" *ngSwitchCase=\"false\">\n        <span>You don't have an account yet?</span>&nbsp;\n        <a class=\"alert-link\" routerLink=\"account/register\"\n          >Register a new account</a\n        >\n      </div>\n    </div>\n\n    <p>If you have any question on JHipster:</p>\n\n    <ul>\n      <li>\n        <a\n          href=\"https://www.jhipster.tech/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >JHipster homepage</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"https://stackoverflow.com/tags/jhipster/info\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >JHipster on Stack Overflow</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >JHipster bug tracker</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"https://gitter.im/jhipster/generator-jhipster\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >JHipster public chat room</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"https://twitter.com/jhipster\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          >follow @jhipster on Twitter</a\n        >\n      </li>\n    </ul>\n\n    <p>\n      <span>If you like JHipster, don't forget to give us a star on</span>\n      <a\n        href=\"https://github.com/jhipster/generator-jhipster\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        >GitHub</a\n      >!\n    </p>\n  </div>\n</div> -->"
        },
        {
            "name": "ItemCountComponent",
            "id": "component-ItemCountComponent-7b2b6bdf1cb34ba521c653fa9eb2a48ca2016bfb91f25362d6e634a412f1a8f6871e1fbf9b7bad0314782ddecf4f5f10500290bd136b74cf2bfeceea2b6ab3b2",
            "file": "src/app/shared/pagination/item-count.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-item-count",
            "styleUrls": [],
            "styles": [],
            "template": "<div>Showing {{ first }} - {{ second }} of {{ total }} items.</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 318,
                            "end": 552,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 319,
                                "end": 324,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Contains parameters for component:\n    page          Current page number\n    totalItems    Total number of items\n    itemsPerPage  Number of items per page</p>\n",
                            "name": {
                                "pos": 325,
                                "end": 331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "params"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 19,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "second",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A component that will take care of item count statistics of a pagination.</p>\n",
            "rawdescription": "\n\nA component that will take care of item count statistics of a pagination.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\n\n/**\n * A component that will take care of item count statistics of a pagination.\n */\n@Component({\n  selector: \"jhi-item-count\",\n  template: `\n    <div>Showing {{ first }} - {{ second }} of {{ total }} items.</div>\n  `,\n})\nexport class ItemCountComponent {\n  /**\n   * @param params  Contains parameters for component:\n   *                    page          Current page number\n   *                    totalItems    Total number of items\n   *                    itemsPerPage  Number of items per page\n   */\n  @Input() set params(params: {\n    page?: number;\n    totalItems?: number;\n    itemsPerPage?: number;\n  }) {\n    if (params.page && params.totalItems !== undefined && params.itemsPerPage) {\n      this.first = (params.page - 1) * params.itemsPerPage + 1;\n      this.second =\n        params.page * params.itemsPerPage < params.totalItems\n          ? params.page * params.itemsPerPage\n          : params.totalItems;\n    } else {\n      this.first = undefined;\n      this.second = undefined;\n    }\n    this.total = params.totalItems;\n  }\n\n  first?: number;\n  second?: number;\n  total?: number;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "params": {
                    "name": "params",
                    "setSignature": {
                        "name": "params",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "params",
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "rawdescription": "\n\n                   page          Current page number\n                   totalItems    Total number of items\n                   itemsPerPage  Number of items per page\n",
                        "description": "<div><pre class=\"line-numbers\"><code class=\"language-none\">               page          Current page number\n               totalItems    Total number of items\n               itemsPerPage  Number of items per page</code></pre></div>",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 325,
                                    "end": 331,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "params"
                                },
                                "type": "literal type",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 319,
                                    "end": 324,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>Contains parameters for component:\n    page          Current page number\n    totalItems    Total number of items\n    itemsPerPage  Number of items per page</p>\n"
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-61e363b54e61dce83776e6594c711ca6461bab00c6daf4d37c74b37e94103b6ef649551fdb9856117ea2ab20ba102fa69392d10f479ead2124cbc9f22ae60737",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authenticationError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "defaultValue": "this.fb.group({\n    username: [null, [Validators.required]],\n    password: [null, [Validators.required]],\n    rememberMe: [false],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'username', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  OnInit,\n  AfterViewInit,\n  ElementRef,\n} from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { LoginService } from \"app/login/login.service\";\nimport { AccountService } from \"app/core/auth/account.service\";\n\n@Component({\n  selector: \"jhi-login\",\n  templateUrl: \"./login.component.html\",\n})\nexport class LoginComponent implements OnInit, AfterViewInit {\n  @ViewChild(\"username\", { static: false })\n  username!: ElementRef;\n\n  authenticationError = false;\n\n  loginForm = this.fb.group({\n    username: [null, [Validators.required]],\n    password: [null, [Validators.required]],\n    rememberMe: [false],\n  });\n\n  constructor(\n    private accountService: AccountService,\n    private loginService: LoginService,\n    private router: Router,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    // if already authenticated then navigate to home page\n    this.accountService.identity().subscribe(() => {\n      if (this.accountService.isAuthenticated()) {\n        this.router.navigate([\"\"]);\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.username.nativeElement.focus();\n  }\n\n  login(): void {\n    this.loginService\n      .login({\n        username: this.loginForm.get(\"username\")!.value,\n        password: this.loginForm.get(\"password\")!.value,\n        rememberMe: this.loginForm.get(\"rememberMe\")!.value,\n      })\n      .subscribe({\n        next: () => {\n          this.authenticationError = false;\n          if (!this.router.getCurrentNavigation()) {\n            // There were no routing during login (eg from navigationToStoredUrl)\n            this.router.navigate([\"\"]);\n          }\n        },\n        error: () => (this.authenticationError = true),\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-lg-6 col-md-8 col-sm-10\">\n      <h1 data-cy=\"loginTitle\">Sign in</h1>\n      <div\n        class=\"alert alert-danger\"\n        *ngIf=\"authenticationError\"\n        data-cy=\"loginError\"\n      >\n        <strong>Failed to sign in!</strong> Please check your credentials and\n        try again.\n      </div>\n      <form\n        class=\"form\"\n        role=\"form\"\n        (ngSubmit)=\"login()\"\n        [formGroup]=\"loginForm\"\n      >\n        <div class=\"mb-3\">\n          <label class=\"username-label\" for=\"username\">Login</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"username\"\n            id=\"username\"\n            placeholder=\"Your username\"\n            formControlName=\"username\"\n            #username\n            data-cy=\"username\"\n          />\n        </div>\n\n        <div class=\"mb-3\">\n          <label for=\"password\">Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Your password\"\n            formControlName=\"password\"\n            data-cy=\"password\"\n          />\n        </div>\n\n        <div class=\"form-check\">\n          <label class=\"form-check-label\" for=\"rememberMe\">\n            <input\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              name=\"rememberMe\"\n              id=\"rememberMe\"\n              formControlName=\"rememberMe\"\n            />\n            <span>Remember me</span>\n          </label>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\" data-cy=\"submit\">\n          Sign in\n        </button>\n      </form>\n      <div class=\"mt-3 alert alert-warning\">\n        <a\n          class=\"alert-link\"\n          routerLink=\"/account/reset/request\"\n          data-cy=\"forgetYourPasswordSelector\"\n          >Did you forget your password?</a\n        >\n      </div>\n\n      <div class=\"alert alert-warning\">\n        <span>You don't have an account yet?</span>\n        <a class=\"alert-link\" routerLink=\"/account/register\"\n          >Register a new account</a\n        >\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-03d40f6c13cd3188c0a4e4ec8e6a470cf6fab3be87f22911f5880f351dfb8fbf2498cbb1170cf56fdb04372a9c842a5a2bca7c7f5d4e159baa24cabeac557563",
            "file": "src/app/layouts/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getPageTitle",
                    "args": [
                        {
                            "name": "routeSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { Title } from \"@angular/platform-browser\";\nimport { Router, ActivatedRouteSnapshot, NavigationEnd } from \"@angular/router\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\n\n@Component({\n  selector: \"jhi-main\",\n  templateUrl: \"./main.component.html\",\n})\nexport class MainComponent implements OnInit {\n  constructor(\n    private accountService: AccountService,\n    private titleService: Title,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    // try to log in automatically\n    this.accountService.identity().subscribe();\n\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationEnd) {\n        this.updateTitle();\n      }\n    });\n  }\n\n  private getPageTitle(routeSnapshot: ActivatedRouteSnapshot): string {\n    const title: string = routeSnapshot.data[\"pageTitle\"] ?? \"\";\n    if (routeSnapshot.firstChild) {\n      return this.getPageTitle(routeSnapshot.firstChild) || title;\n    }\n    return title;\n  }\n\n  private updateTitle(): void {\n    let pageTitle = this.getPageTitle(this.router.routerState.snapshot.root);\n    if (!pageTitle) {\n      pageTitle = \"Contact Pro\";\n    }\n    this.titleService.setTitle(pageTitle);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet name=\"navbar\"></router-outlet>\n<router-outlet></router-outlet>\n<jhi-footer></jhi-footer>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-728aa7911a23c69ff215d52c19a4284e410018991d29ba44630dfdf92b8fb12035dfccebb46ccc360c649285a24a7fa5881ef65a37160b8735e039281e0a61a9",
            "file": "src/app/layouts/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "entitiesNavbarItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inProduction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isNavbarCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "openAPIEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "version",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseNavbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleNavbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { VERSION } from \"app/app.constants\";\nimport { Account } from \"app/core/auth/account.model\";\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { LoginService } from \"app/login/login.service\";\nimport { ProfileService } from \"app/layouts/profiles/profile.service\";\nimport { EntityNavbarItems } from \"app/entities/entity-navbar-items\";\n\n@Component({\n  selector: \"jhi-navbar\",\n  templateUrl: \"./navbar.component.html\",\n  styleUrls: [\"./navbar.component.scss\"],\n})\nexport class NavbarComponent implements OnInit {\n  inProduction?: boolean;\n  isNavbarCollapsed = true;\n  openAPIEnabled?: boolean;\n  version = \"\";\n  account: Account | null = null;\n  entitiesNavbarItems: any[] = [];\n\n  constructor(\n    private loginService: LoginService,\n    private accountService: AccountService,\n    private profileService: ProfileService,\n    private router: Router\n  ) {\n    if (VERSION) {\n      this.version = VERSION.toLowerCase().startsWith(\"v\")\n        ? VERSION\n        : `v${VERSION}`;\n    }\n  }\n\n  ngOnInit(): void {\n    this.entitiesNavbarItems = EntityNavbarItems;\n    this.profileService.getProfileInfo().subscribe((profileInfo) => {\n      this.inProduction = profileInfo.inProduction;\n      this.openAPIEnabled = profileInfo.openAPIEnabled;\n    });\n\n    this.accountService.getAuthenticationState().subscribe((account) => {\n      this.account = account;\n    });\n  }\n\n  collapseNavbar(): void {\n    this.isNavbarCollapsed = true;\n  }\n\n  login(): void {\n    this.router.navigate([\"/login\"]);\n  }\n\n  logout(): void {\n    this.collapseNavbar();\n    this.loginService.logout();\n    this.router.navigate([\"\"]);\n  }\n\n  toggleNavbar(): void {\n    this.isNavbarCollapsed = !this.isNavbarCollapsed;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~bootstrap/scss/functions\";\n@import \"~bootswatch/dist/zephyr/variables\";\n@import \"~bootstrap/scss/variables\";\n\n/* ==========================================================================\nNavbar\n========================================================================== */\n\n.navbar-version {\n  font-size: 0.65em;\n  color: $navbar-dark-color;\n}\n\n.profile-image {\n  height: 1.75em;\n  width: 1.75em;\n}\n\n.navbar {\n  padding: 0.2rem 1rem;\n  .dropdown-item.active,\n  .dropdown-item.active:focus,\n  .dropdown-item.active:hover {\n    background-color: $dark;\n  }\n\n  a.nav-link {\n    font-weight: 400;\n  }\n\n  .navbar-toggler {\n    &:hover {\n      color: $navbar-dark-hover-color;\n    }\n  }\n}\n\n/* ==========================================================================\nLogo styles\n========================================================================== */\n.logo-img {\n  height: 45px;\n  width: 45px;\n  display: inline-block;\n  vertical-align: middle;\n  background: url(\"../../../content/images/logo-jhipster.png\") no-repeat center\n    center;\n  background-size: contain;\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-expand-md navbar-light fixed-top border-bottom border-light navShadow\"\n  [ngSwitch]=\"account !== null\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\"><img src=\"content/img/ContactPro.png\" height=45></a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarCollapse\"\n      aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-md-0\">\n        <li class=\"nav-item\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n          <a class=\"nav-link active\" aria-current=\"page\" routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"contact\">Contacts</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"category\">Categories</a>\n        </li>\n      </ul>\n      <ul class=\"navbar-nav\">\n\n\n\n\n        <li *jhiHasAnyAuthority=\"'ROLE_ADMIN'\" ngbDropdown class=\"nav-item dropdown pointer\" display=\"dynamic\"\n          routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\">\n          <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"admin-menu\"\n            data-cy=\"adminMenu\">\n            <span>\n              <fa-icon icon=\"users-cog\"></fa-icon>\n              <span>Administration</span>\n            </span>\n          </a>\n          <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"admin-menu\">\n            <li>\n              <a class=\"dropdown-item\" routerLink=\"admin/user-management\" routerLinkActive=\"active\"\n                (click)=\"collapseNavbar()\">\n                <fa-icon icon=\"users\" [fixedWidth]=\"true\"></fa-icon>\n                <span>User management</span>\n              </a>\n            </li>\n            <li *ngIf=\"openAPIEnabled\">\n              <a class=\"dropdown-item\" routerLink=\"admin/docs\" routerLinkActive=\"active\" (click)=\"collapseNavbar()\">\n                <fa-icon icon=\"book\" [fixedWidth]=\"true\"></fa-icon>\n                <span>API</span>\n              </a>\n            </li>\n            <li *ngIf=\"!inProduction\">\n              <a class=\"dropdown-item\" href=\"./h2-console/\" target=\"_tab\" (click)=\"collapseNavbar()\">\n                <fa-icon icon=\"database\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Database</span>\n              </a>\n            </li>\n          </ul>\n        </li>\n\n\n\n\n\n        <li ngbDropdown class=\"nav-item dropdown pointer\" display=\"dynamic\" routerLinkActive=\"active\"\n          [routerLinkActiveOptions]=\"{ exact: true }\">\n          <a class=\"nav-link dropdown-toggle\" ngbDropdownToggle href=\"javascript:void(0);\" id=\"account-menu\"\n            data-cy=\"accountMenu\">\n            <span *ngIf=\"!account?.imageUrl\">\n              <fa-icon icon=\"user\"></fa-icon>\n              <span>Account</span>\n            </span>\n            <span *ngIf=\"account?.imageUrl\">\n              <img [src]=\"account!.imageUrl\" class=\"profile-image rounded-circle\" alt=\"Avatar\" />\n            </span>\n          </a>\n          <ul class=\"dropdown-menu\" ngbDropdownMenu aria-labelledby=\"account-menu\">\n            <li *ngSwitchCase=\"true\">\n              <a class=\"dropdown-item\" routerLink=\"account/settings\" routerLinkActive=\"active\"\n                (click)=\"collapseNavbar()\" data-cy=\"settings\">\n                <fa-icon icon=\"wrench\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Settings</span>\n              </a>\n            </li>\n            <li *ngSwitchCase=\"true\">\n              <a class=\"dropdown-item\" routerLink=\"account/password\" routerLinkActive=\"active\"\n                (click)=\"collapseNavbar()\" data-cy=\"passwordItem\">\n                <fa-icon icon=\"lock\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Password</span>\n              </a>\n            </li>\n            <li *ngSwitchCase=\"true\">\n              <a class=\"dropdown-item\" (click)=\"logout()\" id=\"logout\" data-cy=\"logout\">\n                <fa-icon icon=\"sign-out-alt\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Sign out</span>\n              </a>\n            </li>\n            <li *ngSwitchCase=\"false\">\n              <a class=\"dropdown-item\" (click)=\"login()\" id=\"login\" data-cy=\"login\">\n                <fa-icon icon=\"sign-in-alt\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Sign in</span>\n              </a>\n            </li>\n            <li *ngSwitchCase=\"false\">\n              <a class=\"dropdown-item\" routerLink=\"account/register\" routerLinkActive=\"active\"\n                (click)=\"collapseNavbar()\" data-cy=\"register\">\n                <fa-icon icon=\"user-plus\" [fixedWidth]=\"true\"></fa-icon>\n                <span>Register</span>\n              </a>\n            </li>\n          </ul>\n        </li>\n\n\n\n\n\n\n\n        <li class=\"nav-item me-2 mb-2\">\n          <a type=\"button\" class=\"btn btn-primary rounded-pill btnlinks\" routerLink=\"#\">Register</a>\n        </li>\n        <li class=\"nav-item me-2\">\n          <a type=\"button\" class=\"btn btn-outline-primary rounded-pill btnlinks\" (click)=\"login()\">Login</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>"
        },
        {
            "name": "PageRibbonComponent",
            "id": "component-PageRibbonComponent-18aea1a339e9bb59dc4672aec881803370815202167f5b0d46b34eae29d646e4b5e1b4c74eeef120be0d8d980eae494c62c28092b90929843b2c318f6e51053c",
            "file": "src/app/layouts/profiles/page-ribbon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-page-ribbon",
            "styleUrls": [
                "./page-ribbon.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"ribbon\" *ngIf=\"ribbonEnv$ | async as ribbonEnv\">\n  <a href=\"\">{{ ribbonEnv }}</a>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ribbonEnv$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | undefined>",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { ProfileService } from \"./profile.service\";\n\n@Component({\n  selector: \"jhi-page-ribbon\",\n  template: `\n    <div class=\"ribbon\" *ngIf=\"ribbonEnv$ | async as ribbonEnv\">\n      <a href=\"\">{{ ribbonEnv }}</a>\n    </div>\n  `,\n  styleUrls: [\"./page-ribbon.component.scss\"],\n})\nexport class PageRibbonComponent implements OnInit {\n  ribbonEnv$?: Observable<string | undefined>;\n\n  constructor(private profileService: ProfileService) {}\n\n  ngOnInit(): void {\n    this.ribbonEnv$ = this.profileService\n      .getProfileInfo()\n      .pipe(map((profileInfo) => profileInfo.ribbonEnv));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* ==========================================================================\nDevelopement Ribbon\n========================================================================== */\n.ribbon {\n  background-color: rgba(170, 0, 0, 0.5);\n  overflow: hidden;\n  position: absolute;\n  top: 40px;\n  white-space: nowrap;\n  width: 15em;\n  z-index: 9999;\n  pointer-events: none;\n  opacity: 0.75;\n  a {\n    color: #fff;\n    display: block;\n    font-weight: 400;\n    margin: 1px 0;\n    padding: 10px 50px;\n    text-align: center;\n    text-decoration: none;\n    text-shadow: 0 0 5px #444;\n    pointer-events: none;\n  }\n}\n",
                    "styleUrl": "./page-ribbon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-d670997408e1fceedba954be74af76399d1ff78d5c3810966f4dc35346446a630533dc7e2b4a15eecf40c6cd1c48fc63ba62d8d905f7def6c9878ddc195c2362",
            "file": "src/app/account/password/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Account | null>",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "doNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "passwordForm",
                    "defaultValue": "this.fb.group({\n    currentPassword: [\"\", [Validators.required]],\n    newPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { Account } from \"app/core/auth/account.model\";\nimport { PasswordService } from \"./password.service\";\n\n@Component({\n  selector: \"jhi-password\",\n  templateUrl: \"./password.component.html\",\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: [\"\", [Validators.required]],\n    newPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  });\n\n  constructor(\n    private passwordService: PasswordService,\n    private accountService: AccountService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get([\"newPassword\"])!.value;\n    if (newPassword !== this.passwordForm.get([\"confirmPassword\"])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService\n        .save(newPassword, this.passwordForm.get([\"currentPassword\"])!.value)\n        .subscribe({\n          next: () => (this.success = true),\n          error: () => (this.error = true),\n        });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "passwordService",
                        "type": "PasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "passwordService",
                        "type": "PasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2>\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <strong>An error has occurred!</strong> The password could not be\n        changed.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <form\n        name=\"form\"\n        role=\"form\"\n        (ngSubmit)=\"changePassword()\"\n        [formGroup]=\"passwordForm\"\n      >\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"currentPassword\"\n            >Current password</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"Current password\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty ||\n                passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\"\n            >\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"newPassword\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"New password\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty ||\n                passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar\n            [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"\n          ></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"Confirm the new password\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty ||\n                passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n            >\n              Your confirmation password is required to be at least 4\n              characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"passwordForm.invalid\"\n          class=\"btn btn-primary\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PasswordResetFinishComponent",
            "id": "component-PasswordResetFinishComponent-51d277de699fce1a1bbe6a470f872df9acdf534eb6a1e0d5d8bb1dfbef6a646c6e1c968a1c815670e3bff63f0ec41e8f4e9badfec3c38ef8d67bf3d565b2c0b4",
            "file": "src/app/account/password-reset/finish/password-reset-finish.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-password-reset-finish",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-reset-finish.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "doNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "key",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "newPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'newPassword', {static: false}"
                        }
                    ]
                },
                {
                    "name": "passwordForm",
                    "defaultValue": "this.fb.group({\n    newPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "finishReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  ElementRef,\n  ViewChild,\n} from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { PasswordResetFinishService } from \"./password-reset-finish.service\";\n\n@Component({\n  selector: \"jhi-password-reset-finish\",\n  templateUrl: \"./password-reset-finish.component.html\",\n})\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\n  @ViewChild(\"newPassword\", { static: false })\n  newPassword?: ElementRef;\n\n  initialized = false;\n  doNotMatch = false;\n  error = false;\n  success = false;\n  key = \"\";\n\n  passwordForm = this.fb.group({\n    newPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  });\n\n  constructor(\n    private passwordResetFinishService: PasswordResetFinishService,\n    private route: ActivatedRoute,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      if (params[\"key\"]) {\n        this.key = params[\"key\"];\n      }\n      this.initialized = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.newPassword) {\n      this.newPassword.nativeElement.focus();\n    }\n  }\n\n  finishReset(): void {\n    this.doNotMatch = false;\n    this.error = false;\n\n    const newPassword = this.passwordForm.get([\"newPassword\"])!.value;\n    const confirmPassword = this.passwordForm.get([\"confirmPassword\"])!.value;\n\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordResetFinishService.save(this.key, newPassword).subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "passwordResetFinishService",
                        "type": "PasswordResetFinishService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "passwordResetFinishService",
                        "type": "PasswordResetFinishService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-4\">\n      <h1>Reset password</h1>\n\n      <div class=\"alert alert-danger\" *ngIf=\"initialized && !key\">\n        <strong>The password reset key is missing.</strong>\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"key && !success\">\n        <span>Choose a new password</span>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <span\n          >Your password couldn't be reset. Remember a password request is only\n          valid for 24 hours.</span\n        >\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span><strong>Your password has been reset.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <div *ngIf=\"key && !success\">\n        <form\n          name=\"form\"\n          role=\"form\"\n          (ngSubmit)=\"finishReset()\"\n          [formGroup]=\"passwordForm\"\n        >\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"newPassword\">New password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              placeholder=\"New password\"\n              formControlName=\"newPassword\"\n              data-cy=\"resetPassword\"\n              #newPassword\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('newPassword')!.invalid &&\n                (passwordForm.get('newPassword')!.dirty ||\n                  passwordForm.get('newPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n              >\n                Your password is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n              >\n                Your password is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n              >\n                Your password cannot be longer than 50 characters.\n              </small>\n            </div>\n\n            <jhi-password-strength-bar\n              [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"\n            ></jhi-password-strength-bar>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"confirmPassword\"\n              >New password confirmation</label\n            >\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              placeholder=\"Confirm the new password\"\n              formControlName=\"confirmPassword\"\n              data-cy=\"confirmResetPassword\"\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('confirmPassword')!.invalid &&\n                (passwordForm.get('confirmPassword')!.dirty ||\n                  passwordForm.get('confirmPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n              >\n                Your password confirmation is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n              >\n                Your password confirmation is required to be at least 4\n                characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n              >\n                Your password confirmation cannot be longer than 50 characters.\n              </small>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            [disabled]=\"passwordForm.invalid\"\n            class=\"btn btn-primary\"\n            data-cy=\"submit\"\n          >\n            Reset Password\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PasswordResetInitComponent",
            "id": "component-PasswordResetInitComponent-87087331f6996e6a0585abfddf228e9128215b01687393160618c25c5e5abe358ec2b2380678e8e06d36f3303822f3185ae4e0cc4ed127c1e3e4f73cf14dc363",
            "file": "src/app/account/password-reset/init/password-reset-init.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-password-reset-init",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-reset-init.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'email', {static: false}"
                        }
                    ]
                },
                {
                    "name": "resetRequestForm",
                    "defaultValue": "this.fb.group({\n    email: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "requestReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ElementRef, ViewChild } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\n\nimport { PasswordResetInitService } from \"./password-reset-init.service\";\n\n@Component({\n  selector: \"jhi-password-reset-init\",\n  templateUrl: \"./password-reset-init.component.html\",\n})\nexport class PasswordResetInitComponent implements AfterViewInit {\n  @ViewChild(\"email\", { static: false })\n  email?: ElementRef;\n\n  success = false;\n  resetRequestForm = this.fb.group({\n    email: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n  });\n\n  constructor(\n    private passwordResetInitService: PasswordResetInitService,\n    private fb: FormBuilder\n  ) {}\n\n  ngAfterViewInit(): void {\n    if (this.email) {\n      this.email.nativeElement.focus();\n    }\n  }\n\n  requestReset(): void {\n    this.passwordResetInitService\n      .save(this.resetRequestForm.get([\"email\"])!.value)\n      .subscribe(() => (this.success = true));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "passwordResetInitService",
                        "type": "PasswordResetInitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "passwordResetInitService",
                        "type": "PasswordResetInitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1>Reset your password</h1>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <div class=\"alert alert-warning\" *ngIf=\"!success\">\n        <span>Enter the email address you used to register.</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span\n          >Check your emails for details on how to reset your password.</span\n        >\n      </div>\n\n      <form\n        *ngIf=\"!success\"\n        name=\"form\"\n        role=\"form\"\n        (ngSubmit)=\"requestReset()\"\n        [formGroup]=\"resetRequestForm\"\n      >\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"emailResetPassword\"\n            #email\n          />\n\n          <div\n            *ngIf=\"\n              resetRequestForm.get('email')!.invalid &&\n              (resetRequestForm.get('email')!.dirty ||\n                resetRequestForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.email\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"resetRequestForm.invalid\"\n          class=\"btn btn-primary\"\n          data-cy=\"submit\"\n        >\n          Reset\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PasswordStrengthBarComponent",
            "id": "component-PasswordStrengthBarComponent-084ff4ea6516cfd144eb753d0d227d25810376d60023bdfcdefa12535f3272bf2654f09a3ca37c6e526c7b86bef7d37dc09feddd4575ba371a975bafac8a58ee",
            "file": "src/app/account/password/password-strength-bar/password-strength-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-password-strength-bar",
            "styleUrls": [
                "./password-strength-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-strength-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "passwordToCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\"#F00\", \"#F90\", \"#FF0\", \"#9F0\", \"#0F0\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "s",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "measureStrength",
                    "args": [
                        {
                            "name": "p",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, Renderer2 } from \"@angular/core\";\n\n@Component({\n  selector: \"jhi-password-strength-bar\",\n  templateUrl: \"./password-strength-bar.component.html\",\n  styleUrls: [\"./password-strength-bar.component.scss\"],\n})\nexport class PasswordStrengthBarComponent {\n  colors = [\"#F00\", \"#F90\", \"#FF0\", \"#9F0\", \"#0F0\"];\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\n\n  measureStrength(p: string): number {\n    let force = 0;\n    const regex = /[$-/:-?{-~!\"^_`[\\]]/g; // \"\n    const lowerLetters = /[a-z]+/.test(p);\n    const upperLetters = /[A-Z]+/.test(p);\n    const numbers = /\\d+/.test(p);\n    const symbols = regex.test(p);\n\n    const flags = [lowerLetters, upperLetters, numbers, symbols];\n    const passedMatches = flags.filter(\n      (isMatchedFlag: boolean) => isMatchedFlag === true\n    ).length;\n\n    force += 2 * p.length + (p.length >= 10 ? 1 : 0);\n    force += passedMatches * 10;\n\n    // penalty (short password)\n    force = p.length <= 6 ? Math.min(force, 10) : force;\n\n    // penalty (poor variety of characters)\n    force = passedMatches === 1 ? Math.min(force, 10) : force;\n    force = passedMatches === 2 ? Math.min(force, 20) : force;\n    force = passedMatches === 3 ? Math.min(force, 40) : force;\n\n    return force;\n  }\n\n  getColor(s: number): { idx: number; color: string } {\n    let idx = 0;\n    if (s > 10) {\n      if (s <= 20) {\n        idx = 1;\n      } else if (s <= 30) {\n        idx = 2;\n      } else if (s <= 40) {\n        idx = 3;\n      } else {\n        idx = 4;\n      }\n    }\n    return { idx: idx + 1, color: this.colors[idx] };\n  }\n\n  @Input()\n  set passwordToCheck(password: string) {\n    if (password) {\n      const c = this.getColor(this.measureStrength(password));\n      const element = this.elementRef.nativeElement;\n      if (element.className) {\n        this.renderer.removeClass(element, element.className);\n      }\n      const lis = element.getElementsByTagName(\"li\");\n      for (let i = 0; i < lis.length; i++) {\n        if (i < c.idx) {\n          this.renderer.setStyle(lis[i], \"backgroundColor\", c.color);\n        } else {\n          this.renderer.setStyle(lis[i], \"backgroundColor\", \"#DDD\");\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* ==========================================================================\nstart Password strength bar style\n========================================================================== */\nul#strength {\n  display: inline;\n  list-style: none;\n  margin: 0;\n  margin-left: 15px;\n  padding: 0;\n  vertical-align: 2px;\n}\n\n.point {\n  background: #ddd;\n  border-radius: 2px;\n  display: inline-block;\n  height: 5px;\n  margin-right: 1px;\n  width: 20px;\n  &:last-child {\n    margin: 0 !important;\n  }\n}\n",
                    "styleUrl": "./password-strength-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "passwordToCheck": {
                    "name": "passwordToCheck",
                    "setSignature": {
                        "name": "passwordToCheck",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "password",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "password",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div id=\"strength\">\n  <small>Password strength:</small>\n  <ul id=\"strengthBar\">\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n  </ul>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-948d758b9cd4933af7b85c9c78a5e0b059b35468d606eeaf83e33fb4be289a7fd702d84facad83b231e600e1e46c8af58e36344bd8f26efb4ec3b53e67febc6f",
            "file": "src/app/account/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "doNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorEmailExists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errorUserExists",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'login', {static: false}"
                        }
                    ]
                },
                {
                    "name": "registerForm",
                    "defaultValue": "this.fb.group({\n    login: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern(\n          \"^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$\"\n        ),\n      ],\n    ],\n    email: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n    password: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processError",
                    "args": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ElementRef, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\n\nimport {\n  EMAIL_ALREADY_USED_TYPE,\n  LOGIN_ALREADY_USED_TYPE,\n} from \"app/config/error.constants\";\nimport { RegisterService } from \"./register.service\";\n\n@Component({\n  selector: \"jhi-register\",\n  templateUrl: \"./register.component.html\",\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild(\"login\", { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = this.fb.group({\n    login: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern(\n          \"^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$\"\n        ),\n      ],\n    ],\n    email: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n    password: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n    confirmPassword: [\n      \"\",\n      [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    ],\n  });\n\n  constructor(\n    private registerService: RegisterService,\n    private fb: FormBuilder\n  ) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const password = this.registerForm.get([\"password\"])!.value;\n    if (password !== this.registerForm.get([\"confirmPassword\"])!.value) {\n      this.doNotMatch = true;\n    } else {\n      const login = this.registerForm.get([\"login\"])!.value;\n      const email = this.registerForm.get([\"email\"])!.value;\n      this.registerService\n        .save({ login, email, password, langKey: \"en\" })\n        .subscribe({\n          next: () => (this.success = true),\n          error: (response) => this.processError(response),\n        });\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (\n      response.status === 400 &&\n      response.error.type === LOGIN_ALREADY_USED_TYPE\n    ) {\n      this.errorUserExists = true;\n    } else if (\n      response.status === 400 &&\n      response.error.type === EMAIL_ALREADY_USED_TYPE\n    ) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 data-cy=\"registerTitle\">Registration</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Registration saved!</strong> Please check your email for\n        confirmation.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <strong>Registration failed!</strong> Please try again later.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorUserExists\">\n        <strong>Login name already registered!</strong> Please choose another\n        one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorEmailExists\">\n        <strong>Email is already in use!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\">\n        The password and its confirmation do not match!\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <form\n        name=\"form\"\n        role=\"form\"\n        (ngSubmit)=\"register()\"\n        [formGroup]=\"registerForm\"\n        *ngIf=\"!success\"\n      >\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"login\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"Your username\"\n            formControlName=\"login\"\n            data-cy=\"username\"\n            #login\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('login')!.invalid &&\n              (registerForm.get('login')!.dirty ||\n                registerForm.get('login')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.required\"\n            >\n              Your username is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.minlength\"\n            >\n              Your username is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.maxlength\"\n            >\n              Your username cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.pattern\"\n            >\n              Your username can only contain letters and digits.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('email')!.invalid &&\n              (registerForm.get('email')!.dirty ||\n                registerForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"password\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"New password\"\n            formControlName=\"password\"\n            data-cy=\"firstPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('password')!.invalid &&\n              (registerForm.get('password')!.dirty ||\n                registerForm.get('password')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar\n            [passwordToCheck]=\"registerForm.get('password')!.value\"\n          ></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"Confirm the new password\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"secondPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('confirmPassword')!.invalid &&\n              (registerForm.get('confirmPassword')!.dirty ||\n                registerForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.minlength\"\n            >\n              Your confirmation password is required to be at least 4\n              characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"registerForm.invalid\"\n          class=\"btn btn-primary\"\n          data-cy=\"submit\"\n        >\n          Register\n        </button>\n      </form>\n\n      <div class=\"mt-3 alert alert-warning\">\n        <span>If you want to </span>\n        <a class=\"alert-link\" routerLink=\"/login\">sign in</a\n        ><span\n          >, you can try the default accounts:<br />- Administrator\n          (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-85922aebbd8c0821d6344dc3ac0432695cc8a7bbd757251e2691eeec9408b4f96dc7e7b1fc5f0e3936d7e3ab489ffb26640310138a7e45175c0aec6af89fdba3",
            "file": "src/app/account/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-settings",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "settingsForm",
                    "defaultValue": "this.fb.group({\n    firstName: [\n      undefined,\n      [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    ],\n    lastName: [\n      undefined,\n      [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    ],\n    email: [\n      undefined,\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\n\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { Account } from \"app/core/auth/account.model\";\n\n@Component({\n  selector: \"jhi-settings\",\n  templateUrl: \"./settings.component.html\",\n})\nexport class SettingsComponent implements OnInit {\n  account!: Account;\n  success = false;\n  settingsForm = this.fb.group({\n    firstName: [\n      undefined,\n      [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    ],\n    lastName: [\n      undefined,\n      [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    ],\n    email: [\n      undefined,\n      [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(254),\n        Validators.email,\n      ],\n    ],\n  });\n\n  constructor(\n    private accountService: AccountService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe((account) => {\n      if (account) {\n        this.settingsForm.patchValue({\n          firstName: account.firstName,\n          lastName: account.lastName,\n          email: account.email,\n        });\n\n        this.account = account;\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    this.account.firstName = this.settingsForm.get(\"firstName\")!.value;\n    this.account.lastName = this.settingsForm.get(\"lastName\")!.value;\n    this.account.email = this.settingsForm.get(\"email\")!.value;\n\n    this.accountService.save(this.account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(this.account);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 *ngIf=\"account\">\n        User settings for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form\n        name=\"form\"\n        role=\"form\"\n        (ngSubmit)=\"save()\"\n        [formGroup]=\"settingsForm\"\n        *ngIf=\"account\"\n        novalidate\n      >\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"firstName\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"Your first name\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid &&\n              (settingsForm.get('firstName')!.dirty ||\n                settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.required\"\n            >\n              Your first name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\"\n            >\n              Your first name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\"\n            >\n              Your first name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"Your last name\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('lastName')!.invalid &&\n              (settingsForm.get('lastName')!.dirty ||\n                settingsForm.get('lastName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.required\"\n            >\n              Your last name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\"\n            >\n              Your last name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\"\n            >\n              Your last name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Your email\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('email')!.invalid &&\n              (settingsForm.get('email')!.dirty ||\n                settingsForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.email\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"settingsForm.invalid\"\n          class=\"btn btn-primary\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserManagementComponent",
            "id": "component-UserManagementComponent-03d7bfd067f8be4672c9ec8559d75ccd172c9f95c3462db7e127b4d42155a5700854d64abf56ed2687f51344423c3ebea411310b6a0ed288f6162b422ae5032f",
            "file": "src/app/admin/user-management/list/user-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-user-mgmt",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ascending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "currentAccount",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "itemsPerPage",
                    "defaultValue": "ITEMS_PER_PAGE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "predicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "users",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[] | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "users",
                            "type": "User[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "User[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActive",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isActivated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isActivated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "trackIdentity",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { HttpResponse, HttpHeaders } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest } from \"rxjs\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport {\n  ASC,\n  DESC,\n  ITEMS_PER_PAGE,\n  SORT,\n} from \"app/config/pagination.constants\";\nimport { AccountService } from \"app/core/auth/account.service\";\nimport { Account } from \"app/core/auth/account.model\";\nimport { UserManagementService } from \"../service/user-management.service\";\nimport { User } from \"../user-management.model\";\nimport { UserManagementDeleteDialogComponent } from \"../delete/user-management-delete-dialog.component\";\n\n@Component({\n  selector: \"jhi-user-mgmt\",\n  templateUrl: \"./user-management.component.html\",\n})\nexport class UserManagementComponent implements OnInit {\n  currentAccount: Account | null = null;\n  users: User[] | null = null;\n  isLoading = false;\n  totalItems = 0;\n  itemsPerPage = ITEMS_PER_PAGE;\n  page!: number;\n  predicate!: string;\n  ascending!: boolean;\n\n  constructor(\n    private userService: UserManagementService,\n    private accountService: AccountService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.accountService\n      .identity()\n      .subscribe((account) => (this.currentAccount = account));\n    this.handleNavigation();\n  }\n\n  setActive(user: User, isActivated: boolean): void {\n    this.userService\n      .update({ ...user, activated: isActivated })\n      .subscribe(() => this.loadAll());\n  }\n\n  trackIdentity(_index: number, item: User): string {\n    return item.id!;\n  }\n\n  deleteUser(user: User): void {\n    const modalRef = this.modalService.open(\n      UserManagementDeleteDialogComponent,\n      { size: \"lg\", backdrop: \"static\" }\n    );\n    modalRef.componentInstance.user = user;\n    // unsubscribe not needed because closed completes on modal close\n    modalRef.closed.subscribe((reason) => {\n      if (reason === \"deleted\") {\n        this.loadAll();\n      }\n    });\n  }\n\n  loadAll(): void {\n    this.isLoading = true;\n    this.userService\n      .query({\n        page: this.page - 1,\n        size: this.itemsPerPage,\n        sort: this.sort(),\n      })\n      .subscribe({\n        next: (res: HttpResponse<User[]>) => {\n          this.isLoading = false;\n          this.onSuccess(res.body, res.headers);\n        },\n        error: () => (this.isLoading = false),\n      });\n  }\n\n  transition(): void {\n    this.router.navigate([\"./\"], {\n      relativeTo: this.activatedRoute.parent,\n      queryParams: {\n        page: this.page,\n        sort: `${this.predicate},${this.ascending ? ASC : DESC}`,\n      },\n    });\n  }\n\n  private handleNavigation(): void {\n    combineLatest([\n      this.activatedRoute.data,\n      this.activatedRoute.queryParamMap,\n    ]).subscribe(([data, params]) => {\n      const page = params.get(\"page\");\n      this.page = +(page ?? 1);\n      const sort = (params.get(SORT) ?? data[\"defaultSort\"]).split(\",\");\n      this.predicate = sort[0];\n      this.ascending = sort[1] === ASC;\n      this.loadAll();\n    });\n  }\n\n  private sort(): string[] {\n    const result = [`${this.predicate},${this.ascending ? ASC : DESC}`];\n    if (this.predicate !== \"id\") {\n      result.push(\"id\");\n    }\n    return result;\n  }\n\n  private onSuccess(users: User[] | null, headers: HttpHeaders): void {\n    this.totalItems = Number(headers.get(\"X-Total-Count\"));\n    this.users = users;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <h2>\n    <span id=\"user-management-page-heading\" data-cy=\"userManagementPageHeading\"\n      >Users</span\n    >\n\n    <div class=\"d-flex justify-content-end\">\n      <button\n        class=\"btn btn-info me-2\"\n        (click)=\"loadAll()\"\n        [disabled]=\"isLoading\"\n      >\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\n        <span>Refresh List</span>\n      </button>\n      <button class=\"btn btn-primary jh-create-entity\" [routerLink]=\"['./new']\">\n        <fa-icon icon=\"plus\"></fa-icon> <span>Create a new User</span>\n      </button>\n    </div>\n  </h2>\n\n  <jhi-alert-error></jhi-alert-error>\n\n  <jhi-alert></jhi-alert>\n\n  <div class=\"table-responsive\" *ngIf=\"users\">\n    <table\n      class=\"table table-striped\"\n      aria-describedby=\"user-management-page-heading\"\n    >\n      <thead>\n        <tr\n          jhiSort\n          [(predicate)]=\"predicate\"\n          [(ascending)]=\"ascending\"\n          (sortChange)=\"transition()\"\n        >\n          <th scope=\"col\" jhiSortBy=\"id\">\n            <span>ID</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"login\">\n            <span>Login</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"email\">\n            <span>Email</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\"></th>\n          <th scope=\"col\"><span>Profiles</span></th>\n          <th scope=\"col\" jhiSortBy=\"createdDate\">\n            <span>Created Date</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"lastModifiedBy\">\n            <span>Last Modified By</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\" jhiSortBy=\"lastModifiedDate\">\n            <span>Last Modified Date</span> <fa-icon icon=\"sort\"></fa-icon>\n          </th>\n          <th scope=\"col\"></th>\n        </tr>\n      </thead>\n      <tbody *ngIf=\"users\">\n        <tr *ngFor=\"let user of users; trackBy: trackIdentity\">\n          <td>\n            <a [routerLink]=\"['./', user.login, 'view']\">{{ user.id }}</a>\n          </td>\n          <td>{{ user.login }}</td>\n          <td>{{ user.email }}</td>\n          <td>\n            <button\n              class=\"btn btn-danger btn-sm\"\n              (click)=\"setActive(user, true)\"\n              *ngIf=\"!user.activated\"\n            >\n              Deactivated\n            </button>\n            <button\n              class=\"btn btn-success btn-sm\"\n              (click)=\"setActive(user, false)\"\n              *ngIf=\"user.activated\"\n              [disabled]=\"\n                !currentAccount || currentAccount.login === user.login\n              \"\n            >\n              Activated\n            </button>\n          </td>\n          <td>\n            <div *ngFor=\"let authority of user.authorities\">\n              <span class=\"badge bg-info\">{{ authority }}</span>\n            </div>\n          </td>\n          <td>{{ user.createdDate | date: \"dd/MM/yy HH:mm\" }}</td>\n          <td>{{ user.lastModifiedBy }}</td>\n          <td>{{ user.lastModifiedDate | date: \"dd/MM/yy HH:mm\" }}</td>\n          <td class=\"text-end\">\n            <div class=\"btn-group\">\n              <button\n                type=\"submit\"\n                [routerLink]=\"['./', user.login, 'view']\"\n                class=\"btn btn-info btn-sm\"\n              >\n                <fa-icon icon=\"eye\"></fa-icon>\n                <span class=\"d-none d-md-inline\">View</span>\n              </button>\n\n              <button\n                type=\"submit\"\n                [routerLink]=\"['./', user.login, 'edit']\"\n                queryParamsHandling=\"merge\"\n                class=\"btn btn-primary btn-sm\"\n              >\n                <fa-icon icon=\"pencil-alt\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Edit</span>\n              </button>\n\n              <button\n                type=\"button\"\n                (click)=\"deleteUser(user)\"\n                class=\"btn btn-danger btn-sm\"\n                [disabled]=\"\n                  !currentAccount || currentAccount.login === user.login\n                \"\n              >\n                <fa-icon icon=\"times\"></fa-icon>\n                <span class=\"d-none d-md-inline\">Delete</span>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div *ngIf=\"users\">\n    <div class=\"d-flex justify-content-center\">\n      <jhi-item-count\n        [params]=\"{\n          page: page,\n          totalItems: totalItems,\n          itemsPerPage: itemsPerPage\n        }\"\n      ></jhi-item-count>\n    </div>\n\n    <div class=\"d-flex justify-content-center\">\n      <ngb-pagination\n        [collectionSize]=\"totalItems\"\n        [(page)]=\"page\"\n        [pageSize]=\"itemsPerPage\"\n        [maxSize]=\"5\"\n        [rotate]=\"true\"\n        [boundaryLinks]=\"true\"\n        (pageChange)=\"transition()\"\n      ></ngb-pagination>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserManagementDeleteDialogComponent",
            "id": "component-UserManagementDeleteDialogComponent-ab9cc794e93021964f133b04a00a3103bc3ff6dea56a7d2c78a971b37a9bcf0421832ae9109a32856be9394abf3ef2ebcad96b5b223a08cf3781a49569650fe1",
            "file": "src/app/admin/user-management/delete/user-management-delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-user-mgmt-delete-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management-delete-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { NgbActiveModal } from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { User } from \"../user-management.model\";\nimport { UserManagementService } from \"../service/user-management.service\";\n\n@Component({\n  selector: \"jhi-user-mgmt-delete-dialog\",\n  templateUrl: \"./user-management-delete-dialog.component.html\",\n})\nexport class UserManagementDeleteDialogComponent {\n  user?: User;\n\n  constructor(\n    private userService: UserManagementService,\n    private activeModal: NgbActiveModal\n  ) {}\n\n  cancel(): void {\n    this.activeModal.dismiss();\n  }\n\n  confirmDelete(login: string): void {\n    this.userService.delete(login).subscribe(() => {\n      this.activeModal.close(\"deleted\");\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form *ngIf=\"user\" name=\"deleteForm\" (ngSubmit)=\"confirmDelete(user.login!)\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\">Confirm delete operation</h4>\n\n    <button\n      type=\"button\"\n      class=\"btn-close\"\n      data-dismiss=\"modal\"\n      aria-hidden=\"true\"\n      (click)=\"cancel()\"\n    >\n      &times;\n    </button>\n  </div>\n\n  <div class=\"modal-body\">\n    <jhi-alert-error></jhi-alert-error>\n\n    <p>Are you sure you want to delete this User?</p>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary\"\n      data-dismiss=\"modal\"\n      (click)=\"cancel()\"\n    >\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n    </button>\n\n    <button type=\"submit\" class=\"btn btn-danger\">\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span>Delete</span>\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "UserManagementDetailComponent",
            "id": "component-UserManagementDetailComponent-6358e52a7387e121da491ca42b7050635189803730a32e1eca82d8f25b7e1e72b71dc298ead51ce9d3862a74f9a72c04a326737f243e907ac183bc445a124989",
            "file": "src/app/admin/user-management/detail/user-management-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-user-mgmt-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { User } from \"../user-management.model\";\n\n@Component({\n  selector: \"jhi-user-mgmt-detail\",\n  templateUrl: \"./user-management-detail.component.html\",\n})\nexport class UserManagementDetailComponent implements OnInit {\n  user: User | null = null;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      this.user = user;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <div *ngIf=\"user\">\n      <h2>\n        <span>User</span> [<strong>{{ user.login }}</strong\n        >]\n      </h2>\n\n      <dl class=\"row-md jh-entity-details\">\n        <dt><span>Login</span></dt>\n        <dd>\n          <span>{{ user.login }}</span>\n          <span *ngIf=\"user.activated\" class=\"badge bg-success\">Activated</span>\n          <span *ngIf=\"!user.activated\" class=\"badge bg-danger\"\n            >Deactivated</span\n          >\n        </dd>\n\n        <dt><span>First Name</span></dt>\n        <dd>{{ user.firstName }}</dd>\n\n        <dt><span>Last Name</span></dt>\n        <dd>{{ user.lastName }}</dd>\n\n        <dt><span>Email</span></dt>\n        <dd>{{ user.email }}</dd>\n\n        <dt><span>Created By</span></dt>\n        <dd>{{ user.createdBy }}</dd>\n\n        <dt><span>Created Date</span></dt>\n        <dd>{{ user.createdDate | date: \"dd/MM/yy HH:mm\" }}</dd>\n\n        <dt><span>Last Modified By</span></dt>\n        <dd>{{ user.lastModifiedBy }}</dd>\n\n        <dt><span>Last Modified Date</span></dt>\n        <dd>{{ user.lastModifiedDate | date: \"dd/MM/yy HH:mm\" }}</dd>\n\n        <dt><span>Profiles</span></dt>\n        <dd>\n          <ul class=\"list-unstyled\">\n            <li *ngFor=\"let authority of user.authorities\">\n              <span class=\"badge bg-info\">{{ authority }}</span>\n            </li>\n          </ul>\n        </dd>\n      </dl>\n\n      <button type=\"submit\" routerLink=\"../../\" class=\"btn btn-info\">\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span>\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "UserManagementUpdateComponent",
            "id": "component-UserManagementUpdateComponent-787d32ab8684af1048aa8bfc5152ce9ea83d97b6132be3dbc2d9ef4c45d2b74fca12b1c6ee1b9acae404219e9c7ae57a0dfc5f6c4898e6e366c31c72f35f8334",
            "file": "src/app/admin/user-management/update/user-management-update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jhi-user-mgmt-update",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-management-update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authorities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "editForm",
                    "defaultValue": "this.fb.group({\n    id: [],\n    login: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern(\n          \"^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$\"\n        ),\n      ],\n    ],\n    firstName: [\"\", [Validators.maxLength(50)]],\n    lastName: [\"\", [Validators.maxLength(50)]],\n    email: [\n      \"\",\n      [Validators.minLength(5), Validators.maxLength(254), Validators.email],\n    ],\n    activated: [],\n    langKey: [],\n    authorities: [],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onSaveSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "previousState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateForm",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { User } from \"../user-management.model\";\nimport { UserManagementService } from \"../service/user-management.service\";\n\n@Component({\n  selector: \"jhi-user-mgmt-update\",\n  templateUrl: \"./user-management-update.component.html\",\n})\nexport class UserManagementUpdateComponent implements OnInit {\n  user!: User;\n  authorities: string[] = [];\n  isSaving = false;\n\n  editForm = this.fb.group({\n    id: [],\n    login: [\n      \"\",\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern(\n          \"^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$\"\n        ),\n      ],\n    ],\n    firstName: [\"\", [Validators.maxLength(50)]],\n    lastName: [\"\", [Validators.maxLength(50)]],\n    email: [\n      \"\",\n      [Validators.minLength(5), Validators.maxLength(254), Validators.email],\n    ],\n    activated: [],\n    langKey: [],\n    authorities: [],\n  });\n\n  constructor(\n    private userService: UserManagementService,\n    private route: ActivatedRoute,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({ user }) => {\n      if (user) {\n        this.user = user;\n        if (this.user.id === undefined) {\n          this.user.activated = true;\n        }\n        this.updateForm(user);\n      }\n    });\n    this.userService\n      .authorities()\n      .subscribe((authorities) => (this.authorities = authorities));\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    this.updateUser(this.user);\n    if (this.user.id !== undefined) {\n      this.userService.update(this.user).subscribe({\n        next: () => this.onSaveSuccess(),\n        error: () => this.onSaveError(),\n      });\n    } else {\n      this.user.langKey = \"en\";\n      this.userService.create(this.user).subscribe({\n        next: () => this.onSaveSuccess(),\n        error: () => this.onSaveError(),\n      });\n    }\n  }\n\n  private updateForm(user: User): void {\n    this.editForm.patchValue({\n      id: user.id,\n      login: user.login,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      activated: user.activated,\n      langKey: user.langKey,\n      authorities: user.authorities,\n    });\n  }\n\n  private updateUser(user: User): void {\n    user.login = this.editForm.get([\"login\"])!.value;\n    user.firstName = this.editForm.get([\"firstName\"])!.value;\n    user.lastName = this.editForm.get([\"lastName\"])!.value;\n    user.email = this.editForm.get([\"email\"])!.value;\n    user.activated = this.editForm.get([\"activated\"])!.value;\n    user.langKey = this.editForm.get([\"langKey\"])!.value;\n    user.authorities = this.editForm.get([\"authorities\"])!.value;\n  }\n\n  private onSaveSuccess(): void {\n    this.isSaving = false;\n    this.previousState();\n  }\n\n  private onSaveError(): void {\n    this.isSaving = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n  <div class=\"col-8\">\n    <form\n      name=\"editForm\"\n      role=\"form\"\n      novalidate\n      (ngSubmit)=\"save()\"\n      [formGroup]=\"editForm\"\n    >\n      <h2 id=\"myUserLabel\">Create or edit a User</h2>\n\n      <div *ngIf=\"user\">\n        <jhi-alert-error></jhi-alert-error>\n\n        <div class=\"mb-3\" [hidden]=\"!user.id\">\n          <label>ID</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"id\"\n            formControlName=\"id\"\n            readonly\n          />\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Login</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"login\"\n            formControlName=\"login\"\n          />\n\n          <div\n            *ngIf=\"\n              editForm.get('login')!.invalid &&\n              (editForm.get('login')!.dirty || editForm.get('login')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('login')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('login')?.errors?.maxlength\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('login')?.errors?.pattern\"\n            >\n              This field can only contain letters, digits and e-mail addresses.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"firstName\"\n            formControlName=\"firstName\"\n          />\n\n          <div\n            *ngIf=\"\n              editForm.get('firstName')!.invalid &&\n              (editForm.get('firstName')!.dirty ||\n                editForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('firstName')?.errors?.maxlength\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label>Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"lastName\"\n            formControlName=\"lastName\"\n          />\n\n          <div\n            *ngIf=\"\n              editForm.get('lastName')!.invalid &&\n              (editForm.get('lastName')!.dirty ||\n                editForm.get('lastName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('lastName')?.errors?.maxlength\"\n            >\n              This field cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            name=\"email\"\n            formControlName=\"email\"\n          />\n\n          <div\n            *ngIf=\"\n              editForm.get('email')!.invalid &&\n              (editForm.get('email')!.dirty || editForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.required\"\n            >\n              This field is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.maxlength\"\n            >\n              This field cannot be longer than 100 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.minlength\"\n            >\n              This field is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"editForm.get('email')?.errors?.email\"\n            >\n              Your email is invalid.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-check\">\n          <label class=\"form-check-label\" for=\"activated\">\n            <input\n              class=\"form-check-input\"\n              [attr.disabled]=\"user.id === undefined ? 'disabled' : null\"\n              type=\"checkbox\"\n              id=\"activated\"\n              name=\"activated\"\n              formControlName=\"activated\"\n            />\n            <span>Activated</span>\n          </label>\n        </div>\n\n        <div class=\"mb-3\">\n          <label>Profiles</label>\n          <select\n            class=\"form-control\"\n            multiple\n            name=\"authority\"\n            formControlName=\"authorities\"\n          >\n            <option *ngFor=\"let authority of authorities\" [value]=\"authority\">\n              {{ authority }}\n            </option>\n          </select>\n        </div>\n      </div>\n\n      <div *ngIf=\"user\">\n        <button\n          type=\"button\"\n          class=\"btn btn-secondary\"\n          (click)=\"previousState()\"\n        >\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\n        </button>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"editForm.invalid || isSaving\"\n          class=\"btn btn-primary\"\n        >\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AccountModule",
            "id": "module-AccountModule-2b75997dac4f53f554ac6f5b97ecd643322ef7c6a18b32935abc1d3ef220fcc723cca247edeb384e95890228ae03759100dfe68400e48624847a457a5a5565de",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { PasswordStrengthBarComponent } from \"./password/password-strength-bar/password-strength-bar.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { ActivateComponent } from \"./activate/activate.component\";\nimport { PasswordComponent } from \"./password/password.component\";\nimport { PasswordResetInitComponent } from \"./password-reset/init/password-reset-init.component\";\nimport { PasswordResetFinishComponent } from \"./password-reset/finish/password-reset-finish.component\";\nimport { SettingsComponent } from \"./settings/settings.component\";\nimport { accountState } from \"./account.route\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(accountState)],\n  declarations: [\n    ActivateComponent,\n    RegisterComponent,\n    PasswordComponent,\n    PasswordStrengthBarComponent,\n    PasswordResetInitComponent,\n    PasswordResetFinishComponent,\n    SettingsComponent,\n  ],\n})\nexport class AccountModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivateComponent"
                        },
                        {
                            "name": "PasswordComponent"
                        },
                        {
                            "name": "PasswordResetFinishComponent"
                        },
                        {
                            "name": "PasswordResetInitComponent"
                        },
                        {
                            "name": "PasswordStrengthBarComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "SettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "id": "module-AdminRoutingModule-1037f8e8a3286a7bce44dc2e7427a7f302786258b87deb169e400033e2d16623050ce7212fca79e195537e696d4441713042b97474f4ae5fea5dbefa6664f71a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n/* jhipster-needle-add-admin-module-import - JHipster will add admin modules imports here */\n\n@NgModule({\n  imports: [\n    /* jhipster-needle-add-admin-module - JHipster will add admin modules here */\n    RouterModule.forChild([\n      {\n        path: \"user-management\",\n        loadChildren: () =>\n          import(\"./user-management/user-management.module\").then(\n            (m) => m.UserManagementModule\n          ),\n        data: {\n          pageTitle: \"Users\",\n        },\n      },\n      {\n        path: \"docs\",\n        loadChildren: () =>\n          import(\"./docs/docs.module\").then((m) => m.DocsModule),\n      },\n      /* jhipster-needle-add-admin-route - JHipster will add admin routes here */\n    ]),\n  ],\n})\nexport class AdminRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-dc072553484acf7c00f9b4ab09062f89472ab5bc27c720271ae24b35d02cbf3fb094bf1f5f1a3df57c82c4820e78caaf202a981011215457f664229788e132e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, LOCALE_ID } from \"@angular/core\";\nimport { registerLocaleData } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport locale from \"@angular/common/locales/en\";\nimport { BrowserModule, Title } from \"@angular/platform-browser\";\nimport { ServiceWorkerModule } from \"@angular/service-worker\";\nimport { FaIconLibrary } from \"@fortawesome/angular-fontawesome\";\nimport { NgxWebstorageModule } from \"ngx-webstorage\";\nimport dayjs from \"dayjs/esm\";\nimport {\n  NgbDateAdapter,\n  NgbDatepickerConfig,\n} from \"@ng-bootstrap/ng-bootstrap\";\n\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\nimport \"./config/dayjs\";\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { HomeModule } from \"./home/home.module\";\n// jhipster-needle-angular-add-module-import JHipster will add new module here\nimport { NgbDateDayjsAdapter } from \"./config/datepicker-adapter\";\nimport { fontAwesomeIcons } from \"./config/font-awesome-icons\";\nimport { httpInterceptorProviders } from \"app/core/interceptor/index\";\nimport { MainComponent } from \"./layouts/main/main.component\";\nimport { NavbarComponent } from \"./layouts/navbar/navbar.component\";\nimport { FooterComponent } from \"./layouts/footer/footer.component\";\nimport { PageRibbonComponent } from \"./layouts/profiles/page-ribbon.component\";\nimport { ErrorComponent } from \"./layouts/error/error.component\";\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    SharedModule,\n    HomeModule,\n    // jhipster-needle-angular-add-module JHipster will add new module here\n    AppRoutingModule,\n    // Set this to true to enable service worker (PWA)\n    ServiceWorkerModule.register(\"ngsw-worker.js\", { enabled: false }),\n    HttpClientModule,\n    NgxWebstorageModule.forRoot({\n      prefix: \"jhi\",\n      separator: \"-\",\n      caseSensitive: true,\n    }),\n  ],\n  providers: [\n    Title,\n    { provide: LOCALE_ID, useValue: \"en\" },\n    { provide: NgbDateAdapter, useClass: NgbDateDayjsAdapter },\n    httpInterceptorProviders,\n  ],\n  declarations: [\n    MainComponent,\n    NavbarComponent,\n    ErrorComponent,\n    PageRibbonComponent,\n    FooterComponent,\n  ],\n  bootstrap: [MainComponent],\n})\nexport class AppModule {\n  constructor(\n    applicationConfigService: ApplicationConfigService,\n    iconLibrary: FaIconLibrary,\n    dpConfig: NgbDatepickerConfig\n  ) {\n    applicationConfigService.setEndpointPrefix(SERVER_API_URL);\n    registerLocaleData(locale);\n    iconLibrary.addIcons(...fontAwesomeIcons);\n    dpConfig.minDate = {\n      year: dayjs().subtract(100, \"year\").year(),\n      month: 1,\n      day: 1,\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "PageRibbonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HomeModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f5edd93db0e9e902061100ee6dd7fcdb7de70a798beb1175402adaea8207bc7689b3a2ea9656262cc45273e147175b0a18f29442f739802a4d8b96da2dd8bb4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { errorRoute } from \"./layouts/error/error.route\";\nimport { navbarRoute } from \"./layouts/navbar/navbar.route\";\nimport { DEBUG_INFO_ENABLED } from \"app/app.constants\";\nimport { Authority } from \"app/config/authority.constants\";\n\nimport { UserRouteAccessService } from \"app/core/auth/user-route-access.service\";\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(\n      [\n        {\n          path: \"admin\",\n          data: {\n            authorities: [Authority.ADMIN],\n          },\n          canActivate: [UserRouteAccessService],\n          loadChildren: () =>\n            import(\"./admin/admin-routing.module\").then(\n              (m) => m.AdminRoutingModule\n            ),\n        },\n        {\n          path: \"account\",\n          loadChildren: () =>\n            import(\"./account/account.module\").then((m) => m.AccountModule),\n        },\n        {\n          path: \"login\",\n          loadChildren: () =>\n            import(\"./login/login.module\").then((m) => m.LoginModule),\n        },\n        {\n          path: \"\",\n          loadChildren: () =>\n            import(`./entities/entity-routing.module`).then(\n              (m) => m.EntityRoutingModule\n            ),\n        },\n        navbarRoute,\n        ...errorRoute,\n      ],\n      { enableTracing: DEBUG_INFO_ENABLED }\n    ),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CategoryModule",
            "id": "module-CategoryModule-afb69b2c68cc5b5b198c38d2b97261477e329438261de7f010a135be78fee8d4a75c3dd5aa0925b6120884f4538dd2834dd0c858dd2cea37874d6b8500881dc0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entities/category/category.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { CategoryComponent } from \"./list/category.component\";\nimport { CategoryDetailComponent } from \"./detail/category-detail.component\";\nimport { CategoryUpdateComponent } from \"./update/category-update.component\";\nimport { CategoryDeleteDialogComponent } from \"./delete/category-delete-dialog.component\";\nimport { CategoryRoutingModule } from \"./route/category-routing.module\";\n\n@NgModule({\n  imports: [SharedModule, CategoryRoutingModule],\n  declarations: [\n    CategoryComponent,\n    CategoryDetailComponent,\n    CategoryUpdateComponent,\n    CategoryDeleteDialogComponent,\n  ],\n  entryComponents: [CategoryDeleteDialogComponent],\n})\nexport class CategoryModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CategoryComponent"
                        },
                        {
                            "name": "CategoryDeleteDialogComponent"
                        },
                        {
                            "name": "CategoryDetailComponent"
                        },
                        {
                            "name": "CategoryUpdateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CategoryRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CategoryRoutingModule",
            "id": "module-CategoryRoutingModule-5513509aa98af37df65ca2bf6ceb555d250012a75826b1799b3b5a55f10e7a6a36e79ddf7949aaf96eecbf75e28eeba2f9c7fab618996674bfdf59f30ca3410f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entities/category/route/category-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { UserRouteAccessService } from \"app/core/auth/user-route-access.service\";\nimport { CategoryComponent } from \"../list/category.component\";\nimport { CategoryDetailComponent } from \"../detail/category-detail.component\";\nimport { CategoryUpdateComponent } from \"../update/category-update.component\";\nimport { CategoryRoutingResolveService } from \"./category-routing-resolve.service\";\n\nconst categoryRoute: Routes = [\n  {\n    path: \"\",\n    component: CategoryComponent,\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \":id/view\",\n    component: CategoryDetailComponent,\n    resolve: {\n      category: CategoryRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \"new\",\n    component: CategoryUpdateComponent,\n    resolve: {\n      category: CategoryRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \":id/edit\",\n    component: CategoryUpdateComponent,\n    resolve: {\n      category: CategoryRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(categoryRoute)],\n  exports: [RouterModule],\n})\nexport class CategoryRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContactModule",
            "id": "module-ContactModule-1c25c7de015692ef087ef364ed83977371cb1fe32e166aae869626391cb7bef2062c3a441ce70591f4699eca4c20506b97df8f1efdfa6280e617d9e250ef64d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entities/contact/contact.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { ContactComponent } from \"./list/contact.component\";\nimport { ContactDetailComponent } from \"./detail/contact-detail.component\";\nimport { ContactUpdateComponent } from \"./update/contact-update.component\";\nimport { ContactDeleteDialogComponent } from \"./delete/contact-delete-dialog.component\";\nimport { ContactRoutingModule } from \"./route/contact-routing.module\";\n\n@NgModule({\n  imports: [SharedModule, ContactRoutingModule],\n  declarations: [\n    ContactComponent,\n    ContactDetailComponent,\n    ContactUpdateComponent,\n    ContactDeleteDialogComponent,\n  ],\n  entryComponents: [ContactDeleteDialogComponent],\n})\nexport class ContactModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContactComponent"
                        },
                        {
                            "name": "ContactDeleteDialogComponent"
                        },
                        {
                            "name": "ContactDetailComponent"
                        },
                        {
                            "name": "ContactUpdateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContactRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContactRoutingModule",
            "id": "module-ContactRoutingModule-15d326f99ce26f32acaccf9d2b5f33c689e2ae166fee4fc3689d8eb52856aff1660ad36c049c7779291b603b9fae45098be1d714e00ed20703800327a9d4793f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entities/contact/route/contact-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { UserRouteAccessService } from \"app/core/auth/user-route-access.service\";\nimport { ContactComponent } from \"../list/contact.component\";\nimport { ContactDetailComponent } from \"../detail/contact-detail.component\";\nimport { ContactUpdateComponent } from \"../update/contact-update.component\";\nimport { ContactRoutingResolveService } from \"./contact-routing-resolve.service\";\n\nconst contactRoute: Routes = [\n  {\n    path: \"\",\n    component: ContactComponent,\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \":id/view\",\n    component: ContactDetailComponent,\n    resolve: {\n      contact: ContactRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \"new\",\n    component: ContactUpdateComponent,\n    resolve: {\n      contact: ContactRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n  {\n    path: \":id/edit\",\n    component: ContactUpdateComponent,\n    resolve: {\n      contact: ContactRoutingResolveService,\n    },\n    canActivate: [UserRouteAccessService],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(contactRoute)],\n  exports: [RouterModule],\n})\nexport class ContactRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsModule",
            "id": "module-DocsModule-6d54651d67de6c47ebacd4b6c378d921e8bf854ba853ec2a498b337ffcd81d354539490758d045ede55683c5e822ba46c48cae9c22c5abefbdc10214915d44ee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/docs/docs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedModule } from \"app/shared/shared.module\";\n\nimport { DocsComponent } from \"./docs.component\";\nimport { docsRoute } from \"./docs.route\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild([docsRoute])],\n  declarations: [DocsComponent],\n})\nexport class DocsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntityRoutingModule",
            "id": "module-EntityRoutingModule-783d1662ad2a11406a2d8b88a31ed85705cd8c830342a956ab1fdd6952eeb3af561557a7f68095dbf51f99b6b9057d17430251030aae787910f385c944b1bede",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/entities/entity-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"contact\",\n        data: { pageTitle: \"Contacts\" },\n        loadChildren: () =>\n          import(\"./contact/contact.module\").then((m) => m.ContactModule),\n      },\n      {\n        path: \"category\",\n        data: { pageTitle: \"Categories\" },\n        loadChildren: () =>\n          import(\"./category/category.module\").then((m) => m.CategoryModule),\n      },\n      /* jhipster-needle-add-entity-route - JHipster will add entity modules routes here */\n    ]),\n  ],\n})\nexport class EntityRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-75dee18fd759e5d13ec3b9df2b7ff1362595e34cb99d22d052c41f1fffa0d62e21b8b79130a5096a745a634151dd3df784a13a36b1acdd6d9fea24acb898ca45",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { HOME_ROUTE } from \"./home.route\";\nimport { HomeComponent } from \"./home.component\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild([HOME_ROUTE])],\n  declarations: [HomeComponent],\n})\nexport class HomeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-c5f59453e513bec213bfaf944e3b0fba79b1e2a0af0bbaa1bfaf7103ca967f47e91bdc1a0d4d076871ab3dee510a960482190e1241d4017ffcf9bac4132e0580",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { LOGIN_ROUTE } from \"./login.route\";\nimport { LoginComponent } from \"./login.component\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild([LOGIN_ROUTE])],\n  declarations: [LoginComponent],\n})\nexport class LoginModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedLibsModule",
            "id": "module-SharedLibsModule-50a21c6653914c6a9921906e7b9e0c6c5763612f2dc7bf3855aa596433bb92880aae305ec806a135d19954c7e0fd93e5e699a1233d7f522fe4c7aa3c87234ca0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared-libs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { InfiniteScrollModule } from \"ngx-infinite-scroll\";\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\n\n@NgModule({\n  exports: [\n    FormsModule,\n    CommonModule,\n    NgbModule,\n    InfiniteScrollModule,\n    FontAwesomeModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class SharedLibsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-772be60f3d1c0e1d32b4abd5875c5b21217f07faf3f17122c7346dfe4551eb8cb8d990ff804ba89e056edd45b4ed48b96711d0d3c5f9726cd0a01c0ece61bd3c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\n\nimport { SharedLibsModule } from \"./shared-libs.module\";\nimport { AlertComponent } from \"./alert/alert.component\";\nimport { AlertErrorComponent } from \"./alert/alert-error.component\";\nimport { HasAnyAuthorityDirective } from \"./auth/has-any-authority.directive\";\nimport { DurationPipe } from \"./date/duration.pipe\";\nimport { FormatMediumDatetimePipe } from \"./date/format-medium-datetime.pipe\";\nimport { FormatMediumDatePipe } from \"./date/format-medium-date.pipe\";\nimport { SortByDirective } from \"./sort/sort-by.directive\";\nimport { SortDirective } from \"./sort/sort.directive\";\nimport { ItemCountComponent } from \"./pagination/item-count.component\";\n\n@NgModule({\n  imports: [SharedLibsModule],\n  declarations: [\n    AlertComponent,\n    AlertErrorComponent,\n    HasAnyAuthorityDirective,\n    DurationPipe,\n    FormatMediumDatetimePipe,\n    FormatMediumDatePipe,\n    SortByDirective,\n    SortDirective,\n    ItemCountComponent,\n  ],\n  exports: [\n    SharedLibsModule,\n    AlertComponent,\n    AlertErrorComponent,\n    HasAnyAuthorityDirective,\n    DurationPipe,\n    FormatMediumDatetimePipe,\n    FormatMediumDatePipe,\n    SortByDirective,\n    SortDirective,\n    ItemCountComponent,\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "AlertErrorComponent"
                        },
                        {
                            "name": "DurationPipe"
                        },
                        {
                            "name": "FormatMediumDatePipe"
                        },
                        {
                            "name": "FormatMediumDatetimePipe"
                        },
                        {
                            "name": "HasAnyAuthorityDirective"
                        },
                        {
                            "name": "ItemCountComponent"
                        },
                        {
                            "name": "SortByDirective"
                        },
                        {
                            "name": "SortDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedLibsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "AlertErrorComponent"
                        },
                        {
                            "name": "DurationPipe"
                        },
                        {
                            "name": "FormatMediumDatePipe"
                        },
                        {
                            "name": "FormatMediumDatetimePipe"
                        },
                        {
                            "name": "HasAnyAuthorityDirective"
                        },
                        {
                            "name": "ItemCountComponent"
                        },
                        {
                            "name": "SharedLibsModule"
                        },
                        {
                            "name": "SortByDirective"
                        },
                        {
                            "name": "SortDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserManagementModule",
            "id": "module-UserManagementModule-ce917e761372e200acce917d6b71b764d661d62109d4601d801f47a017cdc6d877be29c38a5a56e986d8bbada09c0f3f50428a2478f2b55c77380b8c8de1a6a7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/user-management/user-management.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { SharedModule } from \"app/shared/shared.module\";\nimport { UserManagementComponent } from \"./list/user-management.component\";\nimport { UserManagementDetailComponent } from \"./detail/user-management-detail.component\";\nimport { UserManagementUpdateComponent } from \"./update/user-management-update.component\";\nimport { UserManagementDeleteDialogComponent } from \"./delete/user-management-delete-dialog.component\";\nimport { userManagementRoute } from \"./user-management.route\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(userManagementRoute)],\n  declarations: [\n    UserManagementComponent,\n    UserManagementDetailComponent,\n    UserManagementUpdateComponent,\n    UserManagementDeleteDialogComponent,\n  ],\n  entryComponents: [UserManagementDeleteDialogComponent],\n})\nexport class UserManagementModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserManagementComponent"
                        },
                        {
                            "name": "UserManagementDeleteDialogComponent"
                        },
                        {
                            "name": "UserManagementDetailComponent"
                        },
                        {
                            "name": "UserManagementUpdateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__DEBUG_INFO_ENABLED__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean"
            },
            {
                "name": "__VERSION__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string"
            },
            {
                "name": "ACCOUNT_ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/account.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  activateRoute,\n  passwordRoute,\n  passwordResetFinishRoute,\n  passwordResetInitRoute,\n  registerRoute,\n  settingsRoute,\n]"
            },
            {
                "name": "activateRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/activate/activate.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"activate\",\n  component: ActivateComponent,\n  data: {\n    pageTitle: \"Activation\",\n  },\n}"
            },
            {
                "name": "ASC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/pagination.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"asc\""
            },
            {
                "name": "createRequestOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/request/request-util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(req?: any): HttpParams => {\n  let options: HttpParams = new HttpParams();\n\n  if (req) {\n    Object.keys(req).forEach((key) => {\n      if (key !== \"sort\") {\n        options = options.set(key, req[key]);\n      }\n    });\n\n    if (req.sort) {\n      req.sort.forEach((val: string) => {\n        options = options.append(\"sort\", val);\n      });\n    }\n  }\n\n  return options;\n}"
            },
            {
                "name": "DATE_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/input.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"YYYY-MM-DD\""
            },
            {
                "name": "DATE_TIME_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/input.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"YYYY-MM-DDTHH:mm\""
            },
            {
                "name": "DEBUG_INFO_ENABLED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__DEBUG_INFO_ENABLED__"
            },
            {
                "name": "DESC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/pagination.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"desc\""
            },
            {
                "name": "docsRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/docs/docs.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"\",\n  component: DocsComponent,\n  data: {\n    pageTitle: \"API\",\n  },\n}"
            },
            {
                "name": "EMAIL_ALREADY_USED_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/error.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${PROBLEM_BASE_URL}/email-already-used`"
            },
            {
                "name": "EntityNavbarItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/entities/entity-navbar-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "filterNaN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/util/operators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(input: number): number => (isNaN(input) ? 0 : input)"
            },
            {
                "name": "fontAwesomeIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/font-awesome-icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  faArrowLeft,\n  faAsterisk,\n  faBan,\n  faBars,\n  faBell,\n  faBook,\n  faCalendarAlt,\n  faCheck,\n  faCloud,\n  faCogs,\n  faDatabase,\n  faEye,\n  faFlag,\n  faHeart,\n  faHome,\n  faList,\n  faLock,\n  faPencilAlt,\n  faPlus,\n  faRoad,\n  faSave,\n  faSearch,\n  faSignOutAlt,\n  faSignInAlt,\n  faSort,\n  faSortDown,\n  faSortUp,\n  faSync,\n  faTachometerAlt,\n  faTasks,\n  faThList,\n  faTimes,\n  faTrashAlt,\n  faUser,\n  faUserPlus,\n  faUsers,\n  faUsersCog,\n  faWrench,\n  // jhipster-needle-add-icon-import\n]"
            },
            {
                "name": "HOME_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/home.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"\",\n  component: HomeComponent,\n  data: {\n    pageTitle: \"Welcome, Java Hipster!\",\n  },\n}"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptor/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthExpiredInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ErrorHandlerInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: NotificationInterceptor,\n    multi: true,\n  },\n]"
            },
            {
                "name": "ITEMS_PER_PAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/pagination.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "LOGIN_ALREADY_USED_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/error.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${PROBLEM_BASE_URL}/login-already-used`"
            },
            {
                "name": "LOGIN_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"\",\n  component: LoginComponent,\n  data: {\n    pageTitle: \"Sign in\",\n  },\n}"
            },
            {
                "name": "navbarRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layouts/navbar/navbar.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"\",\n  component: NavbarComponent,\n  outlet: \"navbar\",\n}"
            },
            {
                "name": "passwordResetFinishRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/password-reset/finish/password-reset-finish.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"reset/finish\",\n  component: PasswordResetFinishComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n}"
            },
            {
                "name": "passwordResetInitRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/password-reset/init/password-reset-init.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"reset/request\",\n  component: PasswordResetInitComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n}"
            },
            {
                "name": "passwordRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/password/password.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"password\",\n  component: PasswordComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n  canActivate: [UserRouteAccessService],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/entities/category/list/category.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PROBLEM_BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/error.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"https://www.jhipster.tech/problem\""
            },
            {
                "name": "registerRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/register/register.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"register\",\n  component: RegisterComponent,\n  data: {\n    pageTitle: \"Registration\",\n  },\n}"
            },
            {
                "name": "settingsRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/settings/settings.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\n  path: \"settings\",\n  component: SettingsComponent,\n  data: {\n    pageTitle: \"Settings\",\n  },\n  canActivate: [UserRouteAccessService],\n}"
            },
            {
                "name": "SORT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/pagination.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"sort\""
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/entities/category/list/category.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CategoryComponent>",
                "defaultValue": "(args: CategoryComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__VERSION__"
            }
        ],
        "functions": [
            {
                "name": "getCategoryIdentifier",
                "file": "src/app/entities/category/category.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "category",
                        "type": "ICategory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number | undefined",
                "jsdoctags": [
                    {
                        "name": "category",
                        "type": "ICategory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getContactIdentifier",
                "file": "src/app/entities/contact/contact.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "contact",
                        "type": "IContact",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number | undefined",
                "jsdoctags": [
                    {
                        "name": "contact",
                        "type": "IContact",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getUserIdentifier",
                "file": "src/app/entities/user/user.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "user",
                        "type": "IUser",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string | undefined",
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "IUser",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isPresent",
                "file": "src/app/core/util/operators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "t",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "t",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AlertType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"danger\" | \"warning\" | \"info\"",
                "file": "src/app/core/util/alert.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "EntityArrayResponseType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HttpResponse<ICategory[]>",
                "file": "src/app/entities/category/service/category.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "EntityArrayResponseType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HttpResponse<IContact[]>",
                "file": "src/app/entities/contact/service/contact.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "EntityResponseType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HttpResponse<ICategory>",
                "file": "src/app/entities/category/service/category.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "EntityResponseType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HttpResponse<IContact>",
                "file": "src/app/entities/contact/service/contact.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FileLoadErrorType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"not.image\" | \"could.not.extract\"",
                "file": "src/app/core/util/data-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "JwtToken",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/auth/auth-jwt.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [
            {
                "name": "Authority",
                "childs": [
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_ADMIN"
                    },
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROLE_USER"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/config/authority.constants.ts"
            },
            {
                "name": "States",
                "childs": [
                    {
                        "name": "AK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AK"
                    },
                    {
                        "name": "AL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AL"
                    },
                    {
                        "name": "AR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AR"
                    },
                    {
                        "name": "AS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AS"
                    },
                    {
                        "name": "AZ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AZ"
                    },
                    {
                        "name": "CA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CA"
                    },
                    {
                        "name": "CO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CO"
                    },
                    {
                        "name": "CT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CT"
                    },
                    {
                        "name": "DC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DC"
                    },
                    {
                        "name": "DE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DE"
                    },
                    {
                        "name": "FL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FL"
                    },
                    {
                        "name": "GA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GA"
                    },
                    {
                        "name": "GU",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GU"
                    },
                    {
                        "name": "HI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "HI"
                    },
                    {
                        "name": "IA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IA"
                    },
                    {
                        "name": "ID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ID"
                    },
                    {
                        "name": "IL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IL"
                    },
                    {
                        "name": "IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IN"
                    },
                    {
                        "name": "KS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "KS"
                    },
                    {
                        "name": "KY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "KY"
                    },
                    {
                        "name": "LA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LA"
                    },
                    {
                        "name": "MA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MA"
                    },
                    {
                        "name": "MD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MD"
                    },
                    {
                        "name": "ME",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ME"
                    },
                    {
                        "name": "MI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MI"
                    },
                    {
                        "name": "MN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MN"
                    },
                    {
                        "name": "MO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MO"
                    },
                    {
                        "name": "MP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MP"
                    },
                    {
                        "name": "MS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MS"
                    },
                    {
                        "name": "MT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MT"
                    },
                    {
                        "name": "NC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NC"
                    },
                    {
                        "name": "ND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ND"
                    },
                    {
                        "name": "NE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NE"
                    },
                    {
                        "name": "NH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NH"
                    },
                    {
                        "name": "NJ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NJ"
                    },
                    {
                        "name": "NM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NM"
                    },
                    {
                        "name": "NV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NV"
                    },
                    {
                        "name": "NY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NY"
                    },
                    {
                        "name": "OH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OH"
                    },
                    {
                        "name": "OK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OK"
                    },
                    {
                        "name": "OR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OR"
                    },
                    {
                        "name": "PA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PA"
                    },
                    {
                        "name": "PR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PR"
                    },
                    {
                        "name": "RI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RI"
                    },
                    {
                        "name": "SC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SC"
                    },
                    {
                        "name": "SD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SD"
                    },
                    {
                        "name": "TN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TN"
                    },
                    {
                        "name": "TX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TX"
                    },
                    {
                        "name": "UM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UM"
                    },
                    {
                        "name": "UT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UT"
                    },
                    {
                        "name": "VA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VA"
                    },
                    {
                        "name": "VI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VI"
                    },
                    {
                        "name": "VT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VT"
                    },
                    {
                        "name": "WA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WA"
                    },
                    {
                        "name": "WI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WI"
                    },
                    {
                        "name": "WV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WV"
                    },
                    {
                        "name": "WY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/entities/enumerations/states.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.constants.ts": [
                {
                    "name": "__DEBUG_INFO_ENABLED__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean"
                },
                {
                    "name": "__VERSION__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string"
                },
                {
                    "name": "DEBUG_INFO_ENABLED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__DEBUG_INFO_ENABLED__"
                },
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__VERSION__"
                }
            ],
            "src/app/account/account.route.ts": [
                {
                    "name": "ACCOUNT_ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/account.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  activateRoute,\n  passwordRoute,\n  passwordResetFinishRoute,\n  passwordResetInitRoute,\n  registerRoute,\n  settingsRoute,\n]"
                }
            ],
            "src/app/account/activate/activate.route.ts": [
                {
                    "name": "activateRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/activate/activate.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"activate\",\n  component: ActivateComponent,\n  data: {\n    pageTitle: \"Activation\",\n  },\n}"
                }
            ],
            "src/app/config/pagination.constants.ts": [
                {
                    "name": "ASC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/pagination.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"asc\""
                },
                {
                    "name": "DESC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/pagination.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"desc\""
                },
                {
                    "name": "ITEMS_PER_PAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/pagination.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "SORT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/pagination.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"sort\""
                }
            ],
            "src/app/core/request/request-util.ts": [
                {
                    "name": "createRequestOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/request/request-util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(req?: any): HttpParams => {\n  let options: HttpParams = new HttpParams();\n\n  if (req) {\n    Object.keys(req).forEach((key) => {\n      if (key !== \"sort\") {\n        options = options.set(key, req[key]);\n      }\n    });\n\n    if (req.sort) {\n      req.sort.forEach((val: string) => {\n        options = options.append(\"sort\", val);\n      });\n    }\n  }\n\n  return options;\n}"
                }
            ],
            "src/app/config/input.constants.ts": [
                {
                    "name": "DATE_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/input.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"YYYY-MM-DD\""
                },
                {
                    "name": "DATE_TIME_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/input.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"YYYY-MM-DDTHH:mm\""
                }
            ],
            "src/app/admin/docs/docs.route.ts": [
                {
                    "name": "docsRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/docs/docs.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"\",\n  component: DocsComponent,\n  data: {\n    pageTitle: \"API\",\n  },\n}"
                }
            ],
            "src/app/config/error.constants.ts": [
                {
                    "name": "EMAIL_ALREADY_USED_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/error.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${PROBLEM_BASE_URL}/email-already-used`"
                },
                {
                    "name": "LOGIN_ALREADY_USED_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/error.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${PROBLEM_BASE_URL}/login-already-used`"
                },
                {
                    "name": "PROBLEM_BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/error.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"https://www.jhipster.tech/problem\""
                }
            ],
            "src/app/entities/entity-navbar-items.ts": [
                {
                    "name": "EntityNavbarItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/entities/entity-navbar-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/core/util/operators.ts": [
                {
                    "name": "filterNaN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/util/operators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(input: number): number => (isNaN(input) ? 0 : input)"
                }
            ],
            "src/app/config/font-awesome-icons.ts": [
                {
                    "name": "fontAwesomeIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/font-awesome-icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  faArrowLeft,\n  faAsterisk,\n  faBan,\n  faBars,\n  faBell,\n  faBook,\n  faCalendarAlt,\n  faCheck,\n  faCloud,\n  faCogs,\n  faDatabase,\n  faEye,\n  faFlag,\n  faHeart,\n  faHome,\n  faList,\n  faLock,\n  faPencilAlt,\n  faPlus,\n  faRoad,\n  faSave,\n  faSearch,\n  faSignOutAlt,\n  faSignInAlt,\n  faSort,\n  faSortDown,\n  faSortUp,\n  faSync,\n  faTachometerAlt,\n  faTasks,\n  faThList,\n  faTimes,\n  faTrashAlt,\n  faUser,\n  faUserPlus,\n  faUsers,\n  faUsersCog,\n  faWrench,\n  // jhipster-needle-add-icon-import\n]"
                }
            ],
            "src/app/home/home.route.ts": [
                {
                    "name": "HOME_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/home.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"\",\n  component: HomeComponent,\n  data: {\n    pageTitle: \"Welcome, Java Hipster!\",\n  },\n}"
                }
            ],
            "src/app/core/interceptor/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptor/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthExpiredInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ErrorHandlerInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: NotificationInterceptor,\n    multi: true,\n  },\n]"
                }
            ],
            "src/app/login/login.route.ts": [
                {
                    "name": "LOGIN_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"\",\n  component: LoginComponent,\n  data: {\n    pageTitle: \"Sign in\",\n  },\n}"
                }
            ],
            "src/app/layouts/navbar/navbar.route.ts": [
                {
                    "name": "navbarRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layouts/navbar/navbar.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"\",\n  component: NavbarComponent,\n  outlet: \"navbar\",\n}"
                }
            ],
            "src/app/account/password-reset/finish/password-reset-finish.route.ts": [
                {
                    "name": "passwordResetFinishRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/password-reset/finish/password-reset-finish.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"reset/finish\",\n  component: PasswordResetFinishComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n}"
                }
            ],
            "src/app/account/password-reset/init/password-reset-init.route.ts": [
                {
                    "name": "passwordResetInitRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/password-reset/init/password-reset-init.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"reset/request\",\n  component: PasswordResetInitComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n}"
                }
            ],
            "src/app/account/password/password.route.ts": [
                {
                    "name": "passwordRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/password/password.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"password\",\n  component: PasswordComponent,\n  data: {\n    pageTitle: \"Password\",\n  },\n  canActivate: [UserRouteAccessService],\n}"
                }
            ],
            "src/app/entities/category/list/category.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/entities/category/list/category.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/entities/category/list/category.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CategoryComponent>",
                    "defaultValue": "(args: CategoryComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/account/register/register.route.ts": [
                {
                    "name": "registerRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/register/register.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"register\",\n  component: RegisterComponent,\n  data: {\n    pageTitle: \"Registration\",\n  },\n}"
                }
            ],
            "src/app/account/settings/settings.route.ts": [
                {
                    "name": "settingsRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/settings/settings.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\n  path: \"settings\",\n  component: SettingsComponent,\n  data: {\n    pageTitle: \"Settings\",\n  },\n  canActivate: [UserRouteAccessService],\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/entities/category/category.model.ts": [
                {
                    "name": "getCategoryIdentifier",
                    "file": "src/app/entities/category/category.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | undefined",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "ICategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/entities/contact/contact.model.ts": [
                {
                    "name": "getContactIdentifier",
                    "file": "src/app/entities/contact/contact.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | undefined",
                    "jsdoctags": [
                        {
                            "name": "contact",
                            "type": "IContact",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/entities/user/user.model.ts": [
                {
                    "name": "getUserIdentifier",
                    "file": "src/app/entities/user/user.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string | undefined",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/util/operators.ts": [
                {
                    "name": "isPresent",
                    "file": "src/app/core/util/operators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "t",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "t",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/config/authority.constants.ts": [
                {
                    "name": "Authority",
                    "childs": [
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_ADMIN"
                        },
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROLE_USER"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/config/authority.constants.ts"
                }
            ],
            "src/app/entities/enumerations/states.model.ts": [
                {
                    "name": "States",
                    "childs": [
                        {
                            "name": "AK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AK"
                        },
                        {
                            "name": "AL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AL"
                        },
                        {
                            "name": "AR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AR"
                        },
                        {
                            "name": "AS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AS"
                        },
                        {
                            "name": "AZ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AZ"
                        },
                        {
                            "name": "CA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CA"
                        },
                        {
                            "name": "CO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CO"
                        },
                        {
                            "name": "CT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CT"
                        },
                        {
                            "name": "DC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DC"
                        },
                        {
                            "name": "DE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DE"
                        },
                        {
                            "name": "FL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FL"
                        },
                        {
                            "name": "GA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GA"
                        },
                        {
                            "name": "GU",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GU"
                        },
                        {
                            "name": "HI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "HI"
                        },
                        {
                            "name": "IA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IA"
                        },
                        {
                            "name": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ID"
                        },
                        {
                            "name": "IL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IL"
                        },
                        {
                            "name": "IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IN"
                        },
                        {
                            "name": "KS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "KS"
                        },
                        {
                            "name": "KY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "KY"
                        },
                        {
                            "name": "LA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LA"
                        },
                        {
                            "name": "MA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MA"
                        },
                        {
                            "name": "MD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MD"
                        },
                        {
                            "name": "ME",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ME"
                        },
                        {
                            "name": "MI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MI"
                        },
                        {
                            "name": "MN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MN"
                        },
                        {
                            "name": "MO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MO"
                        },
                        {
                            "name": "MP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MP"
                        },
                        {
                            "name": "MS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MS"
                        },
                        {
                            "name": "MT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MT"
                        },
                        {
                            "name": "NC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NC"
                        },
                        {
                            "name": "ND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ND"
                        },
                        {
                            "name": "NE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NE"
                        },
                        {
                            "name": "NH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NH"
                        },
                        {
                            "name": "NJ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NJ"
                        },
                        {
                            "name": "NM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NM"
                        },
                        {
                            "name": "NV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NV"
                        },
                        {
                            "name": "NY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NY"
                        },
                        {
                            "name": "OH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OH"
                        },
                        {
                            "name": "OK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OK"
                        },
                        {
                            "name": "OR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OR"
                        },
                        {
                            "name": "PA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PA"
                        },
                        {
                            "name": "PR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PR"
                        },
                        {
                            "name": "RI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RI"
                        },
                        {
                            "name": "SC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SC"
                        },
                        {
                            "name": "SD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SD"
                        },
                        {
                            "name": "TN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TN"
                        },
                        {
                            "name": "TX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TX"
                        },
                        {
                            "name": "UM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UM"
                        },
                        {
                            "name": "UT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UT"
                        },
                        {
                            "name": "VA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VA"
                        },
                        {
                            "name": "VI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VI"
                        },
                        {
                            "name": "VT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VT"
                        },
                        {
                            "name": "WA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WA"
                        },
                        {
                            "name": "WI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WI"
                        },
                        {
                            "name": "WV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WV"
                        },
                        {
                            "name": "WY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/entities/enumerations/states.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/util/alert.service.ts": [
                {
                    "name": "AlertType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"danger\" | \"warning\" | \"info\"",
                    "file": "src/app/core/util/alert.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/entities/category/service/category.service.ts": [
                {
                    "name": "EntityArrayResponseType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HttpResponse<ICategory[]>",
                    "file": "src/app/entities/category/service/category.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "EntityResponseType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HttpResponse<ICategory>",
                    "file": "src/app/entities/category/service/category.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/entities/contact/service/contact.service.ts": [
                {
                    "name": "EntityArrayResponseType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HttpResponse<IContact[]>",
                    "file": "src/app/entities/contact/service/contact.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "EntityResponseType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HttpResponse<IContact>",
                    "file": "src/app/entities/contact/service/contact.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/core/util/data-util.service.ts": [
                {
                    "name": "FileLoadErrorType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"not.image\" | \"could.not.extract\"",
                    "file": "src/app/core/util/data-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/auth/auth-jwt.service.ts": [
                {
                    "name": "JwtToken",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/auth/auth-jwt.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/account/account.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACCOUNT_ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/activate/activate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActivateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/account/activate/activate.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activateRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/activate/activate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/finish/password-reset-finish.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordResetFinishComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/finish/password-reset-finish.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordResetFinishRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/finish/password-reset-finish.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PasswordResetFinishService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/init/password-reset-init.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordResetInitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/init/password-reset-init.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordResetInitRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password-reset/init/password-reset-init.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PasswordResetInitService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password/password-strength-bar/password-strength-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordStrengthBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password/password.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/password/password.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/account/register/register.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Registration",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/account/register/register.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/register/register.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/account/settings/settings.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "settingsRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/docs/docs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/docs/docs.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "docsRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/delete/user-management-delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementDeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/detail/user-management-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/list/user-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/service/user-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/update/user-management-update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserManagementUpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/user-management.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/user-management.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/user-management/user-management.route.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UserManagementResolve",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__DEBUG_INFO_ENABLED__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__VERSION__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEBUG_INFO_ENABLED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/datepicker-adapter.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgbDateDayjsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/config/error.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_ALREADY_USED_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/error.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_ALREADY_USED_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/error.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROBLEM_BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/font-awesome-icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fontAwesomeIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/input.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/input.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_TIME_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/pagination.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/pagination.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DESC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/pagination.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEMS_PER_PAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/pagination.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SORT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/uib-pagination.config.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaginationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/account.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth-jwt.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthServerProvider",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/state-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StateStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/user-route-access.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UserRouteAccessService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/application-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptor/auth-expired.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthExpiredInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptor/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptor/error-handler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorHandlerInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptor/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptor/notification.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "NotificationInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/request/request-util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRequestOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/request/request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/request/request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Search",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/request/request.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchWithPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/alert.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlertService",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/alert.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/data-util.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataUtils",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/util/data-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileLoadError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/event-manager.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventWithContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/event-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventManager",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/core/util/operators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isPresent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/operators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterNaN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/util/parse-links.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ParseLinks",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/entities/category/category.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/category.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICategory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/category.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCategoryIdentifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/delete/category-delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryDeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/detail/category-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/list/category.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/list/category.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/list/category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/route/category-routing-resolve.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CategoryRoutingResolveService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/service/category.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoryService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/category/update/category-update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryUpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/contact.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Contact",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/contact.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContact",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/contact.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getContactIdentifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/delete/contact-delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactDeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/detail/contact-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/list/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/route/contact-routing-resolve.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ContactRoutingResolveService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/service/contact.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContactService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/contact/update/contact-update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactUpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/entity-navbar-items.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EntityNavbarItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/user/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/user/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/user/user.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUserIdentifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOME_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/navbar/navbar.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navbarRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/profiles/page-ribbon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageRibbonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/profiles/profile-info.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/profiles/profile-info.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InfoResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layouts/profiles/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert/alert-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert/alert-error.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AlertError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/auth/has-any-authority.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasAnyAuthorityDirective",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/date/duration.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DurationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/date/format-medium-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatMediumDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/date/format-medium-datetime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatMediumDatetimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pagination/item-count.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemCountComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/sort/sort-by.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SortByDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/sort/sort.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SortDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            }
        ]
    }
}